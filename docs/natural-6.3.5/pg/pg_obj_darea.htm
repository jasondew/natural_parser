
<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   
      <meta name="generator" content="Sagdoc XSL Stylesheets">
      <link rel="stylesheet" type="text/css" href="../general/style2.css"><script language="JavaScript" src="../general/selbox.js"></script><script type="text/javascript" language="javascript">
         <!--
window.name = 'contents';
//--></script><title>Data Areas</title>
   </head>
   <body bgcolor="#FFFFFF" background="../graphics/bar.png" style="margin-left: 20px;">
      <div><a name="pg_obj_darea"></a></div>
      <div class="noprint">
         <div class="nospytext">
            <table border="0" cellpadding="0" cellspacing="0" width="97%">
               <col width="15%">
               <col width="34%">
               <col width="48%">
               <tr>
                  <td colspan="2" class="topline"><a name="Top"></a>&nbsp;<img src="../graphics/natux_logo.png"></td>
                  <td class="topline" align="right"><img src="../graphics/sag_logo.png">&nbsp;
                  </td>
               </tr>
               <tr>
                  <td class="header" nowrap><img src="../graphics/blank.png" width="3" height="10"></td>
                  <td class="header"><img src="../graphics/blank.png" width="3">Version&nbsp;6.3.5 for UNIX
                  </td>
                  <td class="toplinks" align="right" nowrap><img src="../graphics/blank.png" width="3"><a class="navig" target="_blank" href="../fts/search.htm" onclick="window.open('../fts/search.htm', 'fts', 'dependent,width=555,height=420,resizable'); return false">SEARCH</a>
                     &nbsp;&nbsp;<a class="navig" href="javascript:sized_window('../navig/navig.htm')" onclick="document.cookie='sagphdcc=../pg/pg_obj_darea.htm;path=/'; window.open('../navig/navig.htm', 'nvgtr', 'dependent,width=450,height=270,resizable'); return false">CONTENTS</a>&nbsp;&nbsp;&nbsp;|
                     &nbsp;&nbsp;<a class="navig" target="_blank" href="http://documentation.softwareag.com/natural/nat635unx/pdf/pg/pg_obj_darea.pdf">PDF PAGE</a>
                     &nbsp;&nbsp;<a class="navig" target="_blank" href="../general/print.htm">PDF BOOKS</a>&nbsp;&nbsp;&nbsp;|
                     &nbsp;&nbsp;<a class="navig" href="../overview.htm">HOME</a>
                     &nbsp;&nbsp;<a class="navig" href="pg_obj-over.htm">UP</a>
                     &nbsp;&nbsp;<a class="navig" href="pg_obj_what.htm">PREV</a>
                     &nbsp;&nbsp;<a class="navig" href="pg_obj_prog.htm">NEXT</a></td>
               </tr>
            </table>
         </div>
      </div>
      <div class="nospytext" style="margin-top:0.25in;">
         <div><span class="module">&nbsp;&#8212;&nbsp;&nbsp;Programming Guide&nbsp;&nbsp;&#8212;</span></div>
      </div> 
        
      <div class="nospytext">
         <h1> Data Areas 
               <a name="x10"></a> 
               <a name="x11"></a></h1>
      </div> 
         
         
      <p>This document covers the following topics:</p>
         
      <ul>
         <li>
            <p class="initem"><a href="pg_obj_darea.htm#data_area_use">Use of Data Areas</a></p>
         </li>
         <li>
            <p class="initem"><a href="pg_obj_darea.htm#Local_Data_Area">Local Data Area</a></p>
         </li>
         <li>
            <p class="initem"><a href="pg_obj_darea.htm#Global_Data_Area">Global Data Area</a></p>
         </li>
         <li>
            <p class="initem"><a href="pg_obj_darea.htm#Parameter_Data_Area">Parameter Data Area</a></p>
         </li>
      </ul> 
        
      <hr> 
        
      <div><a name="data_area_use"></a></div> 
         
      <h2> Use of Data Areas </h2> 
          
          
      <p>As explained in <a href="pg_defi-over.htm#pg_defi-over">Defining
            Fields</a>, all fields that are to be used in a program have
              to be defined in a <a href="../sm/defineda.htm"><code>DEFINE
               DATA</code></a> statement.
      </p> 
          
      <p>The fields can be defined within the <code>DEFINE DATA</code> statement
              itself; or they can be defined outside the program in a separate data area,
              with the <code>DEFINE DATA</code> statement referencing that data area.
      </p> 
          
      <p>A separate data area is a Natural object that can be used by multiple
              Natural programs, subprograms, subroutines, helproutines or classes. A data area contains data element definitions,
              such as user-defined variables, constants and database fields from a data
              definition module (DDM).
      </p> 
          
      <p>All data areas are created and edited with the data area editor.</p> 
          
      <p>Natural supports three types of data area:</p> 
          
      <ul> 
              
         <li> 
                  
            <p class="initem"> <a href="pg_obj_darea.htm#Local_Data_Area">Local Data Area</a></p> 
                 
         </li> 
              
         <li> 
                  
            <p class="initem"> <a href="pg_obj_darea.htm#Global_Data_Area">Global Data Area</a></p>
                  
                 
         </li> 
              
         <li> 
                  
            <p class="initem"> <a href="pg_obj_darea.htm#Parameter_Data_Area">Parameter Data
                         Area</a></p> 
                 
         </li> 
             
      </ul> 
          
        
        
      <div class="noprint">
         <p><a href="pg_obj_darea.htm#Top"><img src="../graphics/uparrow.png" alt="Top of page" height="17" width="17" border="0"></a></p>
      </div>
      <div><a name="Local_Data_Area"></a></div> 
         
      <h2> Local Data Area 
             <a name="x12"></a> 
             <a name="x13"></a> 
             <a name="x14"></a></h2> 
          
          
      <p>Variables defined as local are used only within a single Natural
              programming object. There are two options for defining local data:
      </p> 
          
      <ul> 
              
         <li> 
                  
            <p class="initem">Define local data within a program.</p> 
                 
         </li> 
              
         <li> 
                  
            <p class="initem">Define local data outside a program in a separate Natural programming
                      object, a local data area (LDA).
            </p> 
                  
            <p class="initem">Such a local data area is initialized when a program, subprogram or
                      external subroutine that uses this local data area starts to execute.
            </p> 
                 
         </li> 
             
      </ul> 
          
      <p>For a clear application structure and for easier maintainability, it is
              usually better to define fields in data areas outside the programs.
      </p> 
          
      <div><a name="exa1_direct_field_def"></a></div>
      <h4 class="floating-title"> Example 1 - Fields Defined
              Directly within a DEFINE DATA Statement:
      </h4> 
          
      <p>In the following example, the fields are
              <a href="../sm/defineda_lda.htm#lda_data_definition">defined
                 directly</a> within the <a href="../sm/defineda.htm"><code>DEFINE
               DATA</code></a> statement of the program. 
      </p> 
          <pre class="verbatim">DEFINE DATA LOCAL 
1 VIEWEMP VIEW OF EMPLOYEES 
  2 NAME 
  2 FIRST-NAME 
  2 PERSONNEL-ID 
1 #VARI-A (A20) 
1 #VARI-B (N3.2) 
1 #VARI-C (I4) 
END-DEFINE 
...</pre> 
          <div><a name="exa2_separate_lda"></a></div>
      <h4 class="floating-title"> Example 2 - Fields Defined in a
              Separate Data Area:
      </h4> 
          
      <p>In the following example, the same fields are not defined in the
              <code>DEFINE DATA</code> statement of the program, but in an LDA, named
              <code>LDA39</code>, and the <code>DEFINE DATA</code> statement in the program
              contains only a <a href="../sm/defineda_lda.htm#lda_parameter-data-area">reference to that data
                 area</a>.
      </p> 
          
      <p> Program: </p> 
          <pre class="verbatim">DEFINE DATA LOCAL 
       <strong>USING LDA39</strong> 
END-DEFINE 
  ...</pre> 
          <p> Local Data Area <code>LDA39</code>:
      </p> <pre class="system-output">I T L  Name                             F Length     Miscellaneous             
All -- -------------------------------- - ---------- -------------------------&gt;
  V  1 VIEWEMP                                       EMPLOYEES                 
     2 PERSONNEL-ID                     A          8                           
     2 FIRST-NAME                       A         20                           
     2 NAME                             A         20                           
     1 #VARI-A                          A         20                           
     1 #VARI-B                          N        3.2                           
     1 #VARI-C                          I          4                          </pre> 
          
        
        <div class="noprint">
         <p><a href="pg_obj_darea.htm#Top"><img src="../graphics/uparrow.png" alt="Top of page" height="17" width="17" border="0"></a></p>
      </div>
      <div><a name="Global_Data_Area"></a></div> 
         
      <h2> Global Data Area 
             <a name="x15"></a> 
             <a name="x16"></a> 
             <a name="x17"></a></h2> 
          
          
      <p>The following topics are covered below:</p>
          
      <ul>
         <li>
            <p class="initem"><a href="pg_obj_darea.htm#Create_GDA">Creating and Referencing a GDA</a></p>
         </li>
         <li>
            <p class="initem"><a href="pg_obj_darea.htm#GDA_Instances_Init">Creating and Deleting GDA Instances</a></p>
         </li>
         <li>
            <p class="initem"><a href="pg_obj_darea.htm#Data_Blocks">Data Blocks</a></p>
         </li>
      </ul> 
         
      <div><a name="Create_GDA"></a></div> 
          
      <h3>Creating and Referencing a GDA </h3> 
           
           
      <p>GDAs are created and modified with the Natural data area editor. For
               further information, refer to <a href="../edis/edis_ux_data.htm">Data Area
            Editor</a> in the <cite>Editors</cite>
               documentation.
      </p> 
           
      <p>A GDA that is referenced by a Natural programming object must be stored
               in the same Natural library (or a steplib defined for this library) where the
               object that references this GDA is stored.
      </p> 
           
      <p class="note"><strong>Note:</strong><br>Using a GDA named <code>COMMON</code> for startup:<br>If a
               GDA named <code>COMMON</code> exists in a library, the program named
               <code>ACOMMON</code> is invoked automatically when you <code>LOGON</code> to
               that library.
      </p>
           
           
      <p></p> 
           
      <p class="important"><strong>Important:</strong><br>When you build an application where multiple Natural
               programming objects reference a GDA, remember that modifications to the data
               element definitions in the GDA affect all Natural programming objects that
               reference that data area. Therefore these objects must be recompiled by using
               the <a href="../syscom/catalog.htm"><code>CATALOG</code></a> or
               <a href="../syscom/stow.htm"><code>STOW</code></a>
               command after the GDA has been modified.
      </p> 
           
      <p>To use a GDA, a Natural programming object must reference it with the
               <a href="../sm/defineda_gda.htm"><code>GLOBAL</code></a> clause of
               the <a href="../sm/defineda.htm"><code>DEFINE DATA</code></a>
               statement. Each Natural programming object can reference only one GDA; that is,
               a <code>DEFINE DATA</code> statement must not contain more than one
               <code>GLOBAL</code> clause.
      </p> 
           
          
         
      <div><a name="GDA_Instances_Init"></a></div> 
          
      <h3> Creating and Deleting GDA Instances </h3> 
           
           
      <p>The first instance of a GDA is created and initialized at runtime when
               the first Natural programming object that references it starts to execute.
      </p> 
           
      <p>Once a GDA instance has been created, the data values it contains can
               be shared by all Natural programming objects that reference this GDA (<a href="../sm/defineda_gda.htm"><code>DEFINE DATA GLOBAL</code></a>
               statement) and that are invoked by a <a href="../sm/perform.htm"><code>PERFORM</code></a>,
               <a href="../sm/input.htm"><code>INPUT</code></a> or
               <a href="../sm/fetch.htm"><code>FETCH</code></a> statement. All
               objects that share a GDA instance are operating on the same data elements.
      </p> 
           
      <p>A new GDA instance is created if the following applies:</p> 
           
      <ul> 
               
         <li> 
                   
            <p class="initem">A subprogram that references a GDA (<em>any</em> GDA) is invoked with
                       a <a href="../sm/callnat.htm"><code>CALLNAT</code></a>
                       statement.
            </p> 
                  
         </li> 
               
         <li> 
                   
            <p class="initem">A subprogram that does <em>not</em> reference a GDA invokes a
                       programming object that references a GDA (<em>any</em> GDA).
            </p> 
                  
         </li> 
              
      </ul> 
           
      <p>If a new instance of a GDA is created, the current GDA instance is
               suspended and the data values it contains are stacked. The subprogram then
               references the data values in the newly created GDA instance. The data values
               in the suspended GDA instance or instances is inaccessible. A programming
               object only refers to one GDA instance and cannot access any previous GDA
               instances. A GDA data element can only be passed to a subprogram by defining
               the element as a parameter in the <a href="../sm/callnat.htm"><code>CALLNAT</code></a> statement.
      </p> 
           
      <p>When the subprogram returns to the invoking programming object, the GDA
               instance it references is deleted and the GDA instance suspended previously is
               resumed with its data values.
      </p> 
           
      <p>A GDA instance and its contents is deleted if any of the following
               applies:
      </p> 
           
      <ul> 
               
         <li> 
                   
            <p class="initem">The next <a href="../syscom/logon.htm"><code>LOGON</code></a> is
                       performed.
            </p> 
                  
         </li> 
               
         <li> 
                   
            <p class="initem">Another GDA is referenced on the same level (levels are described
                       later in this section).
            </p> 
                  
         </li> 
               
         <li> 
                   
            <p class="initem">A <a href="../sm/release.htm#RELEASE_VARIABLES"><code>RELEASE
                     VARIABLES</code></a> statement is executed. In this case, the data
                       values in a GDA instance are reset either when a program at the level 1
                       finishes executing, or if the program invokes another program via a
                       <a href="../sm/fetch.htm"><code>FETCH</code></a> or
                       <a href="../sm/run.htm"><code>RUN</code></a> statement.
            </p> 
                   
            <p class="initem">The following graphics illustrate how programming objects reference
                       GDAs and share data elements in GDA instances.
            </p> 
                  
         </li> 
              
      </ul> 
           
      <h4 class="floating-title">Sharing GDA Instances</h4> 
           
      <p>The graphic below illustrates that a subprogram referencing a GDA
               cannot share the data values in a GDA instance referenced by the invoking
               program. A subprogram that references the same GDA as the invoking program
               creates a new instance of this GDA. The data elements defined in a GDA that is
               referenced by a subprogram can, however, be shared by a subroutine or a
               helproutine invoked by the subprogram.
      </p> 
           
      <p>The graphic below shows three GDA instances of GDA1 and the final
               values each GDA instance is assigned by the data element <code>#GLOB1</code>.
               The numbers
               <img src="graphics/gda_share_num1.png" alt="graphics/gda_share_num1.png" width="20" height="20"> to
               <img src="graphics/gda_share_num7.png" alt="graphics/gda_share_num7.png" width="20" height="20">
               indicate the hierarchical levels of the programming objects.
      </p> 
           
      <p><img src="graphics/gda_share.png" alt="" width="600" height="630"></p> 
           
      <h4 class="floating-title"> Using FETCH or FETCH RETURN</h4> 
           
      <p>The graphic below illustrates that programs referencing the same GDA
               and invoking one another with the <a href="../sm/fetch.htm"><code>FETCH</code></a> or
               <a href="../sm/fetch.htm#RETURN"><code>FETCH RETURN</code></a>
               statement share the data elements defined in this GDA. If any of these programs
               does not reference a GDA, the instance of the GDA referenced previously remains
               active and the values of the data elements are retained.
      </p> 
           
      <p>The numbers
               <img src="graphics/gda_share_num1.png" alt="graphics/gda_share_num1.png" width="20" height="20"> and
               <img src="graphics/gda_share_num2.png" alt="graphics/gda_share_num2.png" width="20" height="20">
               indicate the hierarchical levels of the programming objects.
      </p> 
           
      <p><img src="graphics/gda_instance.png" alt="" width="600" height="380"></p> 
           
      <h4 class="floating-title"> Using FETCH with different GDAs </h4> 
           
      <p>The graphic below illustrates that if a program uses the
               <a href="../sm/fetch.htm"><code>FETCH</code></a> statement to
               invoke another program that references a different GDA, the current instance of
               the GDA (here: GDA1) referenced by the invoking program is deleted. If this GDA
               is then referenced again by another program, a new instance of this GDA is
               created where all data elements have their initial values.
      </p> 
           
      <p>You cannot use the <a href="../sm/fetch.htm#RETURN"><code>FETCH
               RETURN</code></a> statement to invoke another program that references a
               different GDA.
      </p> 
           
      <p>The number
               <img src="graphics/gda_share_num1.png" alt="graphics/gda_share_num1.png" width="20" height="20">
               indicates the hierarchical level of the programming objects.
      </p> 
           
      <p>The invoking programs <code>PROG3</code> and <code>PROG4</code> affect
               the GDA instances as follows:
      </p> 
           
      <ul> 
               
         <li> 
                   
            <p class="initem">The statement <code>GLOBAL USING GDA2</code> in <code>PROG3</code>
                       creates an instance of <code>GDA2</code> and deletes the current instance of
                       <code>GDA1</code>.
            </p> 
                  
         </li> 
               
         <li> 
                   
            <p class="initem">The statement <code>GLOBAL USING GDA1</code> in PROG4 deletes the
                       current instance of <code>GDA2</code> and creates a new instance of
                       <code>GDA1</code>. As a result, the <code>WRITE</code> statement displays the
                       value zero (0).
            </p> 
                  
         </li> 
              
      </ul> 
           
      <p><img src="graphics/gda_instance2.png" alt="" width="600" height="390"></p> 
           
         
      <div><a name="Data_Blocks"></a></div> 
          
      <h3>Data Blocks 
              <a name="x18"></a></h3> 
           
           
      <p>To save data storage space, you can create a GDA with data blocks.</p> 
           
      <p>The following topics are covered below:</p>
           
      <ul>
         <li><a href="pg_obj_darea.htm#data_block_usage_exa">Example of Data Block Usage</a></li>
         <li><a href="pg_obj_darea.htm#Defining_Data_Blocks">Defining Data Blocks</a></li>
         <li><a href="pg_obj_darea.htm#Block_Hierarchies">Block Hierarchies</a></li>
      </ul> 
          
      <div><a name="data_block_usage_exa"></a></div> 
           
      <h4>Example of Data Block Usage</h4> 
            
            
      <p>Data blocks can overlay each other during program execution, thereby
                saving storage space.
      </p> 
            
      <p>For example, given the following hierarchy, Blocks B and C would be
                assigned the same storage area. Thus it would not be possible for Blocks B and
                C to be in use at the same time. Modifying Block B would result in destroying
                the contents of Block C.
      </p> 
            
      <p><img src="graphics/pgblocks.png" alt="" width="549" height="350"></p> 
            
          
      <div><a name="Defining_Data_Blocks"></a></div> 
           
      <h4>Defining Data Blocks</h4> 
            
            
      <p> <strong></strong> 
      </p> 
            
      <p>You define data blocks in the <a href="../edis/edis-over.htm">data area editor</a>. You establish the
                block hierarchy by specifying which block is subordinate to which: you do this
                by entering the name of the "parent" block in the comment field of
                the block definition.
      </p> 
            
      <p>In the following example, <code>SUB-BLOCKB</code> and
                <code>SUB-BLOCKC</code> are subordinate to <code>MASTER-BLOCKA</code>;
                <code>SUB-BLOCKD</code> is subordinate to <code>SUB-BLOCKB</code>.
      </p> 
            
      <p>The maximum number of block levels is 8 (including the master
                block).
      </p> 
            
      <h4 class="floating-title"> Example: </h4> 
            
      <p>Global Data Area <code>G-BLOCK</code>:
      </p> <pre class="system-output">
  I T L Name                             F Leng Index/Init/EM/Name/Comment       
  - - - -------------------------------- - ---- ---------------------------------
    B   MASTER-BLOCKA                                                            
      1 MB-DATA01                        A   10                                  
    B   SUB-BLOCKB                              MASTER-BLOCKA                    
      1 SBB-DATA01                       A   20                                  
    B   SUB-BLOCKC                              MASTER-BLOCKA                    
      1 SBC-DATA01                       A   40                                  
    B   SUB-BLOCKD                              SUB-BLOCKB                       
      1 SBD-DATA01                       A   40                                  
                               
</pre> 
            <p>To make the specific blocks available to a program, you use the
                following syntax in the <a href="../sm/defineda.htm"><code>DEFINE
               DATA</code></a> statement:
      </p> 
            
      <p> Program 1: </p> 
            <pre class="verbatim">DEFINE DATA GLOBAL 
       USING G-BLOCK 
       WITH MASTER-BLOCKA 
END-DEFINE</pre> 
            <p> Program 2: </p> 
            <pre class="verbatim">DEFINE DATA GLOBAL 
       USING G-BLOCK 
       WITH MASTER-BLOCKA.SUB-BLOCKB 
END-DEFINE</pre> 
            <p> Program 3: </p> 
            <pre class="verbatim">DEFINE DATA GLOBAL 
       USING G-BLOCK 
       WITH MASTER-BLOCKA.SUB-BLOCKC 
END-DEFINE</pre> 
            <p> Program 4: </p> 
            <pre class="verbatim">DEFINE DATA GLOBAL 
       USING G-BLOCK 
       WITH MASTER-BLOCKA.SUB-BLOCKB.SUB-BLOCKD 
END-DEFINE</pre> 
            <p>With this structure, Program 1 can share the data in
                <code>MASTER-BLOCKA</code> with Program 2, Program 3 or Program 4. However,
                Programs 2 and 3 cannot share the data areas of <code>SUB-BLOCKB</code> and
                <code>SUB-BLOCKC</code> because these data blocks are defined at the same level
                of the structure and thus occupy the same storage area.
      </p> 
            
          
      <div><a name="Block_Hierarchies"></a></div> 
           
      <h4>Block Hierarchies</h4> 
            
            
      <p>Care needs to be taken when using data block hierarchies. Let us
                assume the following scenario with three programs using a data block
                hierarchy:
      </p> 
            
      <p> Program 1: </p> 
            <pre class="verbatim">DEFINE DATA GLOBAL 
       USING G-BLOCK 
       WITH MASTER-BLOCKA.SUB-BLOCKB 
END-DEFINE 
* 
MOVE 1234 TO SBB-DATA01 
FETCH 'PROGRAM2' 
END</pre> 
            <p> Program 2: </p> 
            <pre class="verbatim">DEFINE DATA GLOBAL 
       USING G-BLOCK 
       WITH MASTER-BLOCKA 
END-DEFINE 
* 
FETCH 'PROGRAM3' 
END</pre> 
            <p> Program 3: </p> 
            <pre class="verbatim">DEFINE DATA GLOBAL 
       USING G-BLOCK 
       WITH MASTER-BLOCKA.SUB-BLOCKB 
END-DEFINE 
* 
WRITE SBB-DATA01 
END</pre> 
            <p>Explanation:</p> 
            
      <ul> 
                
         <li> 
                    
            <p class="initem">Program 1 uses the global data area <code>G-BLOCK</code> with
                        <code>MASTER-BLOCKA</code> and <code>SUB-BLOCKB</code>. The program modifies a
                        field in <code>SUB-BLOCKB</code> and <a href="../sm/fetch.htm"><code>FETCH</code></a>es Program 2 which specifies
                        only <code>MASTER-BLOCKA</code> in its data definition.
            </p> 
                   
         </li> 
                
         <li> 
                    
            <p class="initem">Program 2 resets (deletes the contents of) <code>SUB-BLOCKB</code>.
                        The reason is that a program on Level 1 (for example, a program called with a
                        <a href="../sm/fetch.htm"><code>FETCH</code></a> statement) resets
                        any data blocks that are subordinate to the blocks it defines in its own data
                        definition.
            </p> 
                   
         </li> 
                
         <li> 
                    
            <p class="initem">Program 2 now <code>FETCH</code>es Program 3 which is to display the
                        field modified in Program 1, but it returns an empty screen.
            </p> 
                   
         </li> 
               
      </ul> 
            
      <p>For details on program levels, see
                <a href="pg_obj_prog.htm#Multiple_Levels_of_Invoked_Objects">Multiple
            Levels of Invoked Objects</a>.
      </p> 
            
          
        
        
      <div class="noprint">
         <p><a href="pg_obj_darea.htm#Top"><img src="../graphics/uparrow.png" alt="Top of page" height="17" width="17" border="0"></a></p>
      </div>
      <div><a name="Parameter_Data_Area"></a></div> 
         
      <h2> Parameter Data Area 
             <a name="x19"></a> 
             <a name="x20"></a> 
             <a name="x21"></a></h2> 
          
          
      <p>A subprogram is invoked with a <a href="../sm/callnat.htm"><code>CALLNAT</code></a> statement. With the
              <code>CALLNAT</code> statement, parameters can be passed from the invoking
              object to the subprogram.
      </p> 
          
      <p>These parameters must be defined with a
              <a href="../sm/defineda_pda.htm"><code>DEFINE DATA
               PARAMETER</code></a> statement in the subprogram:
      </p> 
          
      <ul> 
              
         <li> 
                  
            <p class="initem">they can be defined in the <code>PARAMETER</code> clause of the
                      <a href="../sm/defineda.htm"><code>DEFINE DATA</code></a>
                      statement itself; or
            </p> 
                 
         </li> 
              
         <li> 
                  
            <p class="initem">they can be defined in a separate parameter data area, with the
                      <a href="../sm/defineda_pda.htm"><code>DEFINE DATA
                     PARAMETER</code></a> statement referencing that PDA.
            </p> 
                 
         </li> 
             
      </ul> 
          
      <p>The following topics are covered
              below:
      </p>
      <ul>
         <li>
            <p class="initem"><a href="pg_obj_darea.htm#d0e2293">Parameters Defined within DEFINE DATA PARAMETER Statement</a></p>
         </li>
         <li>
            <p class="initem"><a href="pg_obj_darea.htm#d0e2304">Parameters Defined in Parameter Data Area</a></p>
         </li>
      </ul> 
         
      <div><a name="d0e2293"></a></div> 
          
      <h3>Parameters Defined within DEFINE DATA PARAMETER Statement</h3> 
           
           
      <p><img src="graphics/pglda1.png" alt="" width="550" height="450"></p> 
           
          
         
      <div><a name="d0e2304"></a></div> 
          
      <h3>Parameters Defined in Parameter Data Area</h3> 
           
           
      <p><img src="graphics/pglda2.png" alt="" width="549" height="450"></p> 
           
      <p>In the same way, parameters that are passed to an external subroutine
               via a <a href="../sm/perform.htm"><code>PERFORM</code></a>
               statement must be defined with a <a href="../sm/defineda_pda.htm"><code>DEFINE DATA PARAMETER</code></a>
               statement in the external subroutine.
      </p> 
           
      <p>In the invoking object, the parameter variables passed to the
               subprogram/subroutine need not be defined in a PDA; in the illustrations above,
               they are defined in the LDA used by the invoking object (but they could also be
               defined in a GDA).
      </p> 
           
      <p>The sequence, format and length of the parameters specified with the
               <a href="../sm/callnat.htm"><code>CALLNAT</code></a>/<a href="../sm/perform.htm"><code>PERFORM</code></a> statement in the
               invoking object must exactly match the sequence,
               <a href="pg_defi_dv.htm#Format_Length_Def">format</a> and length of the
               fields specified in the <code>DEFINE DATA PARAMETER</code> statement of the
               invoked subprogram/subroutine. However, the names of the variables in the
               invoking object and the invoked subprogram/subroutine need not be the same (as
               the parameter data are transferred by address, not by name).
      </p> 
           
      <p>To guarantee that the data element definitions used in the invoking
               program are identical to the data element definitions used in the subprogram or
               external subroutine, you can specify a PDA in a <code>DEFINE DATA LOCAL
            USING</code> statement. By using a PDA as an LDA you can avoid the extra effort
               of creating an LDA that has the same structure as the PDA.
      </p> 
           
          
        
       
      <div class="noprint">
         <div class="nospy">
            <p><a href="pg_obj_darea.htm#Top"><img src="../graphics/uparrow.png" alt="Top of page" height="17" width="17" border="0"></a></p>
            <table border="0" cellpadding="0" cellspacing="0" width="97%">
               <col width="15%">
               <col width="34%">
               <col width="48%">
               <tr>
                  <td class="footer"><img src="../graphics/blank.png" width="3" height="10">&nbsp;<a class="navig" target="_blank" href="http://www.softwareag.com">www.softwareag.com</a>&nbsp;
                  </td>
                  <td nowrap class="footer"><img src="../graphics/blank.png" width="3"><a class="navig" href="../general/legal.htm" target="_blank">Copyright &copy; Software AG 1992-2008. All rights reserved.&nbsp;</a></td>
                  <td class="bottomlinks" align="right" nowrap><img src="../graphics/blank.png" width="3"><a class="navig" target="_blank" href="../fts/search.htm" onclick="window.open('../fts/search.htm', 'fts', 'dependent,width=555,height=420,resizable'); return false">SEARCH</a>
                     &nbsp;&nbsp;<a class="navig" href="javascript:sized_window('../navig/navig.htm')" onclick="document.cookie='sagphdcc=../pg/pg_obj_darea.htm;path=/'; window.open('../navig/navig.htm', 'nvgtr', 'dependent,width=450,height=270,resizable'); return false">CONTENTS</a>&nbsp;&nbsp;&nbsp;|
                     &nbsp;&nbsp;<a class="navig" target="_blank" href="http://documentation.softwareag.com/natural/nat635unx/pdf/pg/pg_obj_darea.pdf">PDF PAGE</a>
                     &nbsp;&nbsp;<a class="navig" target="_blank" href="../general/print.htm">PDF BOOKS</a>&nbsp;&nbsp;&nbsp;|
                     &nbsp;&nbsp;<a class="navig" href="../overview.htm">HOME</a>
                     &nbsp;&nbsp;<a class="navig" href="pg_obj-over.htm">UP</a>
                     &nbsp;&nbsp;<a class="navig" href="pg_obj_what.htm">PREV</a>
                     &nbsp;&nbsp;<a class="navig" href="pg_obj_prog.htm">NEXT</a></td>
               </tr>
            </table>
         </div>
      </div>
   </body>
</html>