
<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   
      <meta name="generator" content="Sagdoc XSL Stylesheets">
      <link rel="stylesheet" type="text/css" href="../general/style2.css"><script language="JavaScript" src="../general/selbox.js"></script><script type="text/javascript" language="javascript">
         <!--
window.name = 'contents';
//--></script><title>Developing NaturalX Applications</title>
   </head>
   <body bgcolor="#FFFFFF" background="../graphics/bar.png" style="margin-left: 20px;">
      <div><a name="pg_natx_dev"></a></div>
      <div class="noprint">
         <div class="nospytext">
            <table border="0" cellpadding="0" cellspacing="0" width="97%">
               <col width="15%">
               <col width="34%">
               <col width="48%">
               <tr>
                  <td colspan="2" class="topline"><a name="Top"></a>&nbsp;<img src="../graphics/natux_logo.png"></td>
                  <td class="topline" align="right"><img src="../graphics/sag_logo.png">&nbsp;
                  </td>
               </tr>
               <tr>
                  <td class="header" nowrap><img src="../graphics/blank.png" width="3" height="10"></td>
                  <td class="header"><img src="../graphics/blank.png" width="3">Version&nbsp;6.3.5 for UNIX
                  </td>
                  <td class="toplinks" align="right" nowrap><img src="../graphics/blank.png" width="3"><a class="navig" target="_blank" href="../fts/search.htm" onclick="window.open('../fts/search.htm', 'fts', 'dependent,width=555,height=420,resizable'); return false">SEARCH</a>
                     &nbsp;&nbsp;<a class="navig" href="javascript:sized_window('../navig/navig.htm')" onclick="document.cookie='sagphdcc=../pg/pg_natx_dev.htm;path=/'; window.open('../navig/navig.htm', 'nvgtr', 'dependent,width=450,height=270,resizable'); return false">CONTENTS</a>&nbsp;&nbsp;&nbsp;|
                     &nbsp;&nbsp;<a class="navig" target="_blank" href="http://documentation.softwareag.com/natural/nat635unx/pdf/pg/pg_natx_dev.pdf">PDF PAGE</a>
                     &nbsp;&nbsp;<a class="navig" target="_blank" href="../general/print.htm">PDF BOOKS</a>&nbsp;&nbsp;&nbsp;|
                     &nbsp;&nbsp;<a class="navig" href="../overview.htm">HOME</a>
                     &nbsp;&nbsp;<a class="navig" href="pg_natx-over.htm">UP</a>
                     &nbsp;&nbsp;<a class="navig" href="pg_natx_intro.htm">PREV</a>
                     &nbsp;&nbsp;<a class="navig" href="pg_keyw.htm">NEXT</a></td>
               </tr>
            </table>
         </div>
      </div>
      <div class="nospytext" style="margin-top:0.25in;">
         <div><span class="module">&nbsp;&#8212;&nbsp;&nbsp;Programming Guide&nbsp;&nbsp;&#8212;</span></div>
      </div> 
        
      <div class="nospytext">
         <h1> 
               <a name="x618"></a> Developing NaturalX Applications
         </h1>
      </div> 
         
         
      <p>This document describes how to develop an application by defining and
             using classes.
      </p> 
         
      <p>The following topics are covered:</p> 
      <ul>
         <li>
            <p class="initem"><a href="pg_natx_dev.htm#Using_the_Class_Builder">Development Environments</a></p>
         </li>
         <li>
            <p class="initem"><a href="pg_natx_dev.htm#Defining_Classes_pg_natx_dev">Defining Classes</a></p>
         </li>
         <li>
            <p class="initem"><a href="pg_natx_dev.htm#Using_Classes_and_Objects">Using Classes and Objects</a></p>
         </li>
      </ul> 
        
      <hr> 
        
      <div><a name="Using_the_Class_Builder"></a></div> 
         
      <h2> Development Environments </h2> 
          
          
      <ul> 
              
         <li> 
                   
                  
            <p class="initem"><strong>Developing Classes on Windows Platforms </strong><br> On Windows platforms, Natural provides the Class Builder as the tool
                      to develop Natural classes. The Class Builder shows a Natural class in a
                      structured hierarchical order and allows the user to manage the class and its
                      components efficiently. If you use the Class Builder, no knowledge or only a
                      basic knowledge of the syntax elements described below is required.
            </p> 
                 
         </li> 
              
         <li> 
                   
                  
            <p class="initem"><strong>Developing Classes Using SPoD </strong><br> In a Natural Single Point of Development (SPoD) environment that
                      includes a Mainframe, UNIX and/or OpenVMS remote development server, you can
                      use the Class Builder available with the Natural Studio front-end to develop
                      classes on Mainframe, UNIX and/or OpenVMS platforms. In this case, no knowledge
                      or only a basic knowledge of the syntax elements described below is
                      required.
            </p> 
                 
         </li> 
              
         <li> 
                   
                  
            <p class="initem"><strong>Developing Classes on Mainframe, UNIX or OpenVMS Platforms
                         </strong><br> If you do not use SPoD, you develop classes on these platforms using
                      the Natural program editor. In this case, you should know the syntax of class
                      definition described below.
            </p> 
                 
         </li> 
             
      </ul> 
          
        
        
      <div class="noprint">
         <p><a href="pg_natx_dev.htm#Top"><img src="../graphics/uparrow.png" alt="Top of page" height="17" width="17" border="0"></a></p>
      </div>
      <div><a name="Defining_Classes_pg_natx_dev"></a></div> 
         
      <h2> 
             <a name="x619"></a> Defining Classes
      </h2> 
          
          
      <p>When you define a class, you must create a Natural class module, within
              which you create a <a href="../sm/definecl.htm"><code>DEFINE
               CLASS</code></a> statement. Using the <code>DEFINE CLASS</code>
              statement, you assign the class an externally usable name and define its
              interfaces, methods and properties. You can also assign an object data area to
              the class, which describes the layout of an instance of the class.
              
      </p> 
          
      <p>This section covers the following topics:</p> 
      <ul>
         <li>
            <p class="initem"><a href="pg_natx_dev.htm#Creating_a_Natural_Class_Module">Creating a Natural Class Module</a></p>
         </li>
         <li>
            <p class="initem"><a href="pg_natx_dev.htm#Specifying_a_Class">Specifying a Class</a></p>
         </li>
         <li>
            <p class="initem"><a href="pg_natx_dev.htm#Defining_an_Interface">Defining an Interface</a></p>
         </li>
         <li>
            <p class="initem"><a href="pg_natx_dev.htm#Assigning_an_Object_Data_Variable_to_a_Property">Assigning an Object Data Variable to a Property</a></p>
         </li>
         <li>
            <p class="initem"><a href="pg_natx_dev.htm#Assigning_a_Subprogram_to_a_Method">Assigning a Subprogram to a Method</a></p>
         </li>
         <li>
            <p class="initem"><a href="pg_natx_dev.htm#Implementing_Methods">Implementing Methods</a></p>
         </li>
      </ul> 
          
         
      <div><a name="Creating_a_Natural_Class_Module"></a></div> 
          
      <h3> Creating a Natural Class Module </h3> 
           
           
      <p class="to"><img src="../graphics/bluearro.png" alt="Start of instruction set" width="18" height="15"><strong> To create a Natural class module </strong></p>
      <ul>
         <li> 
                    
                    
            <p class="instep">Use the <a href="../sm/create.htm"><code>CREATE
                     OBJECT</code></a> statement to create a Natural object of type
                        Class.
            </p> 
                    
                  
         </li>
      </ul> 
           
          
         
      <div><a name="Specifying_a_Class"></a></div> 
          
      <h3> Specifying a Class </h3> 
           
           
      <p>The <a href="../sm/definecl.htm"><code>DEFINE
               CLASS</code></a> statement defines the name of the class, the interfaces
               the class supports and the structure of its objects. 
      </p> 
           
      <p class="to"><img src="../graphics/bluearro.png" alt="Start of instruction set" width="18" height="15"><strong> To specify a class </strong></p>
      <ul>
         <li> 
                    
                    
            <p class="instep">Use the <a href="../sm/definecl.htm"><code>DEFINE
                     CLASS</code></a> statement as described in the
                        <cite>Statements</cite> documentation.
            </p> 
                    
                  
         </li>
      </ul> 
           
          
         
      <div><a name="Defining_an_Interface"></a></div> 
          
      <h3> 
              <a name="x620"></a>Defining an Interface 
      </h3> 
           
           
      <p>Each interface of a class is specified with an
               <a href="../sm/interfa.htm"><code>INTERFACE</code></a> statement
               inside the class definition. An <code>INTERFACE</code> statement specifies the
               name of the interface and a number of properties and methods. For classes that
               are to be registered as COM classes, it specifies also the globally inique ID
               of the interface.
      </p> 
           
      <p>A class can have one or several interfaces. For each interface, one
               <code>INTERFACE</code> statement is coded in the class definition. Each
               <code>INTERFACE</code> statement contains one or several
               <a href="../sm/interfa.htm#interface_property_def"><code>PROPERTY</code></a>
               and <a href="../sm/interfa.htm#interface_method_def"><code>METHOD</code></a>
               clauses. Usually the properties and methods contained in one interface are
               related from either a technical or a business point of view.
      </p> 
           
      <p>The <a href="../sm/interfa.htm#interface_property_def"><code>PROPERTY</code></a>
               clause defines the name of a property and assigns a variable from the object
               data area to the property. This variable is used to store the value of the
               property.
      </p> 
           
      <p>The <a href="../sm/interfa.htm#interface_method_def"><code>METHOD</code></a>
               clause defines the name of a method and assigns a subprogram to the method.
               This subprogram is used to implement the method.
      </p> 
           
      <p class="to"><img src="../graphics/bluearro.png" alt="Start of instruction set" width="18" height="15"><strong> To define an interface </strong></p>
      <ul>
         <li> 
                    
                    
            <p class="instep">Use the <a href="../sm/interfa.htm"><code>INTERFACE</code></a> statement as
                        described in the <cite>Statements</cite> documentation.
            </p> 
                    
                  
         </li>
      </ul> 
           
          
         
      <div><a name="Assigning_an_Object_Data_Variable_to_a_Property"></a></div> 
          
      <h3> 
              <a name="x621"></a> Assigning an Object Data Variable to a Property 
      </h3> 
           
           
      <p>The <a href="../sm/property.htm"><code>PROPERTY</code></a>
               statement is used only when several classes are to implement the same interface
               in different ways. In this case, the classes share the same interface
               definition and include it from a Natural <a href="pg_obj_copy.htm#pg_obj_copy">copycode</a>. The <code>PROPERTY</code> statement
               is then used to assign a variable from the object data area to a property,
               <em>outside</em> the interface definition. Like the
               <a href="../sm/interfa.htm#interface_property_def"><code>PROPERTY</code></a>
               clause of the <a href="../sm/interfa.htm"><code>INTERFACE</code></a> statement, the
               <code>PROPERTY</code> statement defines the name of a property and assigns a
               variable from the object data area to the property. This variable is used to
               store the value of the property.
      </p> 
           
      <p class="to"><img src="../graphics/bluearro.png" alt="Start of instruction set" width="18" height="15"><strong> To assign an object data variable to a property </strong></p>
      <ul>
         <li> 
                    
                    
            <p class="instep">Use the <a href="../sm/property.htm"><code>PROPERTY</code></a> statement as
                        described in the <cite>Statements</cite> documentation.
            </p> 
                    
                  
         </li>
      </ul> 
           
          
         
      <div><a name="Assigning_a_Subprogram_to_a_Method"></a></div> 
          
      <h3> 
              <a name="x622"></a> 
              <a name="x623"></a> Assigning a Subprogram to a Method 
      </h3> 
           
           
      <p>The <a href="../sm/method.htm"><code>METHOD</code>
                  statement</a> is used only when several classes are to implement the
               same interface in different ways. In this case, the classes share the same
               interface definition and include it from a Natural
               <a href="pg_obj_copy.htm#pg_obj_copy">copycode</a>. The <code>METHOD</code>
               statement is then used to assign a subprogram to the method, <em>outside</em>
               the interface definition. Like the
               <a href="../sm/interfa.htm#interface_method_def"><code>METHOD</code></a>
               clause of the <a href="../sm/interfa.htm"><code>INTERFACE</code></a> statement, the
               <code>METHOD</code> statement defines the name of a method and assigns a
               subprogram to the method. This subprogram is used to implement the method.
      </p> 
           
      <p class="to"><img src="../graphics/bluearro.png" alt="Start of instruction set" width="18" height="15"><strong> To assign a subprogram to a method </strong></p>
      <ul>
         <li> 
                    
                    
            <p class="instep">Use the <a href="../sm/method.htm"><code>METHOD</code></a> statement as described in
                        the <cite>Statements</cite> documentation.
            </p> 
                    
                  
         </li>
      </ul> 
           
          
         
      <div><a name="Implementing_Methods"></a></div> 
          
      <h3> 
              <a name="x624"></a> Implementing Methods 
      </h3> 
           
           
      <p>A method is implemented as a Natural subprogram in the following
               general form:
      </p> 
           <pre class="verbatim">
<strong>DEFINE DATA</strong> statement
*
* Implementation code of the method
*
<strong>END</strong>
</pre> 
           <p>For information on the <a href="../sm/defineda.htm"><code>DEFINE
               DATA</code></a> statement see the <cite>Statements</cite>
               documentation.
      </p> 
           
      <p>All clauses of the <code>DEFINE DATA</code> statement are optional.
      </p>
           
           
      <p>It is recommended that you use data areas instead of inline data
               definitions to ensure data consistency.
      </p> 
           
      <p>If a <a href="../sm/defineda_pda.htm"><code>PARAMETER</code>
                  clause</a> is specified, the method can have parameters and/or a return
               value.
      </p> 
           
      <p>Parameters that are marked
               <a href="../sm/defineda_pda.htm#BY_VALUE"><code>BY
               VALUE</code></a> in the parameter data area are input parameters of the
               method.
      </p> 
           
      <p>Parameters that are not marked <code>BY VALUE</code> are passed
               "by reference" and are input/output parameters. This is the
               default.
      </p> 
           
      <p>The first parameter that is marked
               <a href="../sm/defineda_pda.htm#BY_VALUE_RESULT"><code>BY VALUE
               RESULT</code></a> is returned as the return value for the method. If
               more than one parameter is marked in this way, the others will be treated as
               input/output parameters.
      </p> 
           
      <p>Parameters that are marked
               <a href="../sm/defineda_pda.htm#OPTIONAL"><code>OPTIONAL</code></a> need not be specified when the method is called.
               They can be left unspecified by using the
               <a href="../sm/sendmeth.htm#nX_sendmeth"><code><var>n</var>X</code>
                  notation</a> in the <a href="../sm/sendmeth.htm"><code>SEND
               METHOD</code></a> statement.
      </p> 
           
      <p>To make sure that the method subprogram accepts exactly the same
               parameters as specified in the corresponding <a href="../sm/method.htm"><code>METHOD</code></a> statement in the class
               definition, use a parameter data area instead of inline data definitions. Use
               the same parameter data area as in the corresponding <code>METHOD</code>
               statement.
      </p> 
           
      <p>To give the method subprogram access to the object data structure, the
               <a href="../sm/defineda_nxx.htm"><code>OBJECT</code></a> clause
               can be specified. To make sure that the method subprogram can access the object
               data correctly, use a local data area instead of inline data definitions. Use
               the same local data area as specified in the
               <a href="../sm/definecl.htm#OBJECT_Clause"><code>OBJECT</code></a>
               clause of the <a href="../sm/definecl.htm"><code>DEFINE
               CLASS</code></a> statement.
      </p> 
           
      <p>The <a href="../sm/defineda_gda.htm"><code>GLOBAL</code></a>,
               <a href="../sm/defineda_lda.htm"><code>LOCAL</code></a> and
               <a href="../sm/defineda_aiv.htm"><code>INDEPENDENT</code></a>
               clauses can be used as in any other Natural program.
      </p> 
           
      <p>While technically possible, it is usually not meaningful to use a
               <a href="../sm/defineda_cv.htm"><code>CONTEXT</code></a> clause in
               a method subprogram.
      </p> 
           
      <p>The following example retrieves data about a given person from a table.
               The search key is passed as a <a href="../sm/defineda_pda.htm#BY_VALUE"><code>BY VALUE</code></a>
               parameter. The resulting data is returned through "by reference"
               parameters ("by reference" is the default definition). The return
               value of the method is defined by the specification
               <a href="../sm/defineda_pda.htm#BY_VALUE_RESULT"><code>BY VALUE
               RESULT</code></a>.
      </p> 
           
      <p><img src="graphics/pg-natx-example.png" alt="Example" width="560" height="580"></p> 
           
          
        
        
      <div class="noprint">
         <p><a href="pg_natx_dev.htm#Top"><img src="../graphics/uparrow.png" alt="Top of page" height="17" width="17" border="0"></a></p>
      </div>
      <div><a name="Using_Classes_and_Objects"></a></div> 
         
      <h2> Using Classes and Objects </h2> 
          
          
      <p>Objects created in a local Natural session can be accessed by other
              modules in the same Natural session.
      </p> 
           
          
      <p>The statement <a href="../sm/create.htm"><code>CREATE
               OBJECT</code></a> is used to create an object (also known as an
              instance) of a given class.
      </p> 
          
      <p>To reference objects in Natural programs, object handles have to be
              defined in the <a href="../sm/defineda.htm"><code>DEFINE
               DATA</code></a> statement. Methods of an object are invoked with the
              statement <a href="../sm/sendmeth.htm"><code>SEND
               METHOD</code></a>. Objects can have properties, which can be accessed
              using the normal assignment syntax.
      </p> 
           
          
      <p>These steps are described below:</p> 
      <ul>
         <li>
            <p class="initem"><a href="pg_natx_dev.htm#Defining_Object_Handles">Defining Object Handles</a></p>
         </li>
         <li>
            <p class="initem"><a href="pg_natx_dev.htm#Creating_an_Instance_of_a_Class">Creating an Instance of a Class</a></p>
         </li>
         <li>
            <p class="initem"><a href="pg_natx_dev.htm#Invoking_a_Particular_Method_of_an_Object">Invoking a Particular Method of an Object</a></p>
         </li>
         <li>
            <p class="initem"><a href="pg_natx_dev.htm#Accessing_Properties">Accessing Properties</a></p>
         </li>
      </ul> 
          
         
      <div><a name="Defining_Object_Handles"></a></div> 
          
      <h3> 
              <a name="x625"></a> Defining Object Handles
      </h3> 
           
           
      <p>To reference objects in Natural programs, object handles have to be
               defined as follows in the <code>DEFINE DATA</code> statement:
      </p> 
            
            
      <table border="0" class="syntax" cellpadding="3">  
                
         <tbody align="left" valign="top"> 
                    
            <tr> 
                        
               <td align="left" nowrap> <code class="keyword">DEFINE
                     DATA</code> 
               </td> 
                       
            </tr> 
                    
            <tr> 
                        
               <td align="left" nowrap>&nbsp;
                  &nbsp;<var>level-handle-name</var>
                            [(<var>array-definition</var>)] <code class="keyword">HANDLE OF
                               OBJECT</code> 
               </td> 
                       
            </tr> 
                    
            <tr> 
                        
               <td align="left">&nbsp; &nbsp;...</td> 
                       
            </tr> 
                    
            <tr> 
                        
               <td align="left"> <code class="keyword">END-DEFINE</code> 
               </td> 
                       
            </tr> 
                   
         </tbody> 
               
      </table> 
            
           
      <p> Example: </p> 
           <pre class="verbatim">
DEFINE DATA LOCAL
1 #MYOBJ1 HANDLE OF OBJECT
1 #MYOBJ2 (1:5) HANDLE OF OBJECT
END-DEFINE
</pre> 
           
          
         <div><a name="Creating_an_Instance_of_a_Class"></a></div> 
          
      <h3> 
              <a name="x626"></a> 
              <a name="x627"></a> Creating an Instance of a Class 
      </h3> 
           
           
      <p class="to"><img src="../graphics/bluearro.png" alt="Start of instruction set" width="18" height="15"><strong> To create an instance of a class </strong></p>
      <ul>
         <li> 
                    
                    
            <p class="instep">Use the <a href="../sm/create.htm"><code>CREATE
                     OBJECT</code></a> statement as described in the
                        <cite>Statements</cite> documentation.
            </p> 
                    
                  
         </li>
      </ul> 
           
          
         
      <div><a name="Invoking_a_Particular_Method_of_an_Object"></a></div> 
          
      <h3> 
              <a name="x628"></a> Invoking a Particular Method of an Object 
      </h3> 
           
           
      <p class="to"><img src="../graphics/bluearro.png" alt="Start of instruction set" width="18" height="15"><strong> To invoke a particular method of an object </strong></p>
      <ul>
         <li> 
                    
                    
            <p class="instep">Use the <a href="../sm/sendmeth.htm"><code>SEND
                     METHOD</code></a> statement as described in the
                        <cite>Statements</cite> documentation.
            </p> 
                    
                  
         </li>
      </ul> 
           
          
         
      <div><a name="Accessing_Properties"></a></div> 
          
      <h3> 
              <a name="x629"></a> Accessing Properties 
      </h3> 
           
           
      <p>Properties can be accessed using the <a href="../sm/assign.htm"><code>ASSIGN</code></a> (or
               <a href="../sm/compute.htm"><code>COMPUTE</code></a> ) statement
               as follows:
      </p> 
            
            
      <table border="0" class="syntax" cellpadding="3">  
                
         <tbody align="left" valign="top"> 
                    
            <tr> 
                        
               <td align="left" nowrap> <code class="keyword">ASSIGN</code>
                         <var>operand1.property-name</var> =
                            <var>operand2</var> 
               </td> 
                       
            </tr> 
                    
            <tr> 
                        
               <td align="left"> <code class="keyword">ASSIGN</code>
                         <var>operand2</var> =
                            <var>operand1.property-name</var> 
               </td> 
                       
            </tr> 
                   
         </tbody> 
               
      </table> 
            
           
      <h4 class="floating-title"> Object Handle -
               <var>operand1</var></h4> 
           
      <p> <var>operand1</var> must be defined as an object
               handle and identifies the object whose property is to be accessed. The object
               must already exist.
      </p> 
           
      <h4 class="floating-title"> <var>operand2</var></h4> 
           
      <p>As <var>operand2</var>, you specify an operand whose
               format must be data transfer-compatible to the format of the property. Please
               refer to the <a href="pg_furth_arithm.htm#Data_Transfer">data transfer compatibility
                  rules</a> for further information.
      </p> 
            
           
      <h4 class="floating-title"><var> property-name</var></h4>
           
           
      <p>The name of a property of the object.</p> 
           
      <p>If the property name conforms to Natural identifier syntax, it can be
               specified as follows
      </p> 
           <pre class="verbatim">
create object #o1 of class "Employee"
  <strong>#age := #o1.Age</strong>
</pre> 
           <p>If the property name does not conform to Natural identifier syntax, it
               must be enclosed in angle brackets:
      </p> 
           <pre class="verbatim">
create object #o1 of class "Employee"
  <strong>#salary := #o1.&lt;&lt;%Salary&gt;&gt;</strong>
</pre> 
           <p>The property name can also be qualified with an interface name. This is
               necessary if the object has more than one interface containing a property with
               the same name. In this case, the qualified property name must be enclosed in
               angle brackets:
      </p> 
           <pre class="verbatim">
create object #o1 of class "Employee"
  <strong>#age := #o1.&lt;&lt;PersonalData.Age&gt;&gt;</strong>
</pre> 
           <p> Example: </p> 
           <pre class="verbatim">
define data
  local
  1 #i         (i2)
  1 #o         handle of object
  1 #p         (5) handle of object
  1 #q         (5) handle of object
  1 #salary    (p7.2)
  1 #history   (p7.2/1:10)
  end-define
  * ...
  * <em>Code omitted for brevity.</em>
  * ...
  * Set/Read the Salary property of the object #o.
  #o.Salary := #salary
  #salary := #o.Salary
  * Set/Read the Salary property of
  * the second object of the array #p.
  #p.Salary(2) := #salary
  #salary := #p.Salary(2)
  *
  * Set/Read the SalaryHistory property of the object #o.
  #o.SalaryHistory := #history(1:10)
  #history(1:10) := #o.SalaryHistory
  * Set/Read the SalaryHistory property of
  * the second object of the array #p.
  #p.SalaryHistory(2) := #history(1:10)
  #history(1:10) := #p.SalaryHistory(2)
  *
  * Set the Salary property of each object in #p to the same value.
  #p.Salary(*) := #salary
  * Set the SalaryHistory property of each object in #p
  * to the same value.
  #p.SalaryHistory(*) := #history(1:10)
  *
  * Set the Salary property of each object in #p to the value
  * of the Salary property of the corresponding object in #q.
  #p.Salary(*) := #q.Salary(*)
  * Set the SalaryHistory property of each object in #p to the value
  * of the SalaryHistory property of the corresponding object in #q.
  #p.SalaryHistory(*) := #q.SalaryHistory(*)
  *
  end
</pre> 
           <p>In order to use arrays of object handles and properties that have
               arrays as values correctly, it is important to know the following:
      </p> 
           
      <p>A property of an occurrence of an array of object handles is addressed
               with the following index notation:
      </p> 
           <pre class="verbatim">#p.Salary(2) := #salary</pre> 
           <p>A property that has an array as value is always accessed as a whole.
               Therefore no index notation is necessary with the property name:
      </p> 
           <pre class="verbatim">#o.SalaryHistory := #history(1:10)</pre> 
           <p>A property of an occurrence of an array of object handles which has an
               array as value is therefore addressed as follows:
      </p> 
           <pre class="verbatim">#p.SalaryHistory(2) := #history(1:10)</pre> 
           
          
          
        
       <div class="noprint">
         <div class="nospy">
            <p><a href="pg_natx_dev.htm#Top"><img src="../graphics/uparrow.png" alt="Top of page" height="17" width="17" border="0"></a></p>
            <table border="0" cellpadding="0" cellspacing="0" width="97%">
               <col width="15%">
               <col width="34%">
               <col width="48%">
               <tr>
                  <td class="footer"><img src="../graphics/blank.png" width="3" height="10">&nbsp;<a class="navig" target="_blank" href="http://www.softwareag.com">www.softwareag.com</a>&nbsp;
                  </td>
                  <td nowrap class="footer"><img src="../graphics/blank.png" width="3"><a class="navig" href="../general/legal.htm" target="_blank">Copyright &copy; Software AG 1992-2008. All rights reserved.&nbsp;</a></td>
                  <td class="bottomlinks" align="right" nowrap><img src="../graphics/blank.png" width="3"><a class="navig" target="_blank" href="../fts/search.htm" onclick="window.open('../fts/search.htm', 'fts', 'dependent,width=555,height=420,resizable'); return false">SEARCH</a>
                     &nbsp;&nbsp;<a class="navig" href="javascript:sized_window('../navig/navig.htm')" onclick="document.cookie='sagphdcc=../pg/pg_natx_dev.htm;path=/'; window.open('../navig/navig.htm', 'nvgtr', 'dependent,width=450,height=270,resizable'); return false">CONTENTS</a>&nbsp;&nbsp;&nbsp;|
                     &nbsp;&nbsp;<a class="navig" target="_blank" href="http://documentation.softwareag.com/natural/nat635unx/pdf/pg/pg_natx_dev.pdf">PDF PAGE</a>
                     &nbsp;&nbsp;<a class="navig" target="_blank" href="../general/print.htm">PDF BOOKS</a>&nbsp;&nbsp;&nbsp;|
                     &nbsp;&nbsp;<a class="navig" href="../overview.htm">HOME</a>
                     &nbsp;&nbsp;<a class="navig" href="pg_natx-over.htm">UP</a>
                     &nbsp;&nbsp;<a class="navig" href="pg_natx_intro.htm">PREV</a>
                     &nbsp;&nbsp;<a class="navig" href="pg_keyw.htm">NEXT</a></td>
               </tr>
            </table>
         </div>
      </div>
   </body>
</html>