
<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   
      <meta name="generator" content="Sagdoc XSL Stylesheets">
      <link rel="stylesheet" type="text/css" href="../general/style2.css"><script language="JavaScript" src="../general/selbox.js"></script><script type="text/javascript" language="javascript">
         <!--
window.name = 'contents';
//--></script><title>INTERFACE</title>
   </head>
   <body bgcolor="#FFFFFF" background="../graphics/bar.png" style="margin-left: 20px;">
      <div><a name="interfa" id="16821"></a></div>
      <div class="noprint">
         <div class="nospytext">
            <table border="0" cellpadding="0" cellspacing="0" width="97%">
               <col width="15%">
               <col width="34%">
               <col width="48%">
               <tr>
                  <td colspan="2" class="topline"><a name="Top"></a>&nbsp;<img src="../graphics/natux_logo.png"></td>
                  <td class="topline" align="right"><img src="../graphics/sag_logo.png">&nbsp;
                  </td>
               </tr>
               <tr>
                  <td class="header" nowrap><img src="../graphics/blank.png" width="3" height="10"></td>
                  <td class="header"><img src="../graphics/blank.png" width="3">Version&nbsp;6.3.5 for UNIX
                  </td>
                  <td class="toplinks" align="right" nowrap><img src="../graphics/blank.png" width="3"><a class="navig" target="_blank" href="../fts/search.htm" onclick="window.open('../fts/search.htm', 'fts', 'dependent,width=555,height=420,resizable'); return false">SEARCH</a>
                     &nbsp;&nbsp;<a class="navig" href="javascript:sized_window('../navig/navig.htm')" onclick="document.cookie='sagphdcc=../sm/interfa.htm;path=/'; window.open('../navig/navig.htm', 'nvgtr', 'dependent,width=450,height=270,resizable'); return false">CONTENTS</a>&nbsp;&nbsp;&nbsp;|
                     &nbsp;&nbsp;<a class="navig" target="_blank" href="http://documentation.softwareag.com/natural/nat635unx/pdf/sm/interfa.pdf">PDF PAGE</a>
                     &nbsp;&nbsp;<a class="navig" target="_blank" href="../general/print.htm">PDF BOOKS</a>&nbsp;&nbsp;&nbsp;|
                     &nbsp;&nbsp;<a class="navig" href="../overview.htm">HOME</a>
                     &nbsp;&nbsp;<a class="navig" href="sm-over.htm">UP</a>
                     &nbsp;&nbsp;<a class="navig" href="input2.htm">PREV</a>
                     &nbsp;&nbsp;<a class="navig" href="limit.htm">NEXT</a></td>
               </tr>
            </table>
         </div>
      </div>
      <div class="nospytext" style="margin-top:0.25in;">
         <div><span class="module">&nbsp;&#8212;&nbsp;&nbsp;Statements&nbsp;&nbsp;&#8212;</span></div>
      </div> 
        
      <div class="nospytext">
         <h1> INTERFACE 
               <a name="x115"></a></h1>
      </div> 
         
          
          
      <table border="0" class="syntax" cellpadding="3"> 
               
              
         <tbody align="left" valign="top"> 
                  
            <tr> 
                      
               <td colspan="2" nowrap>
                  <a href="interfa.htm#Function_interfa"> <code class="keyword">INTERFACE</code>
                             </a> &nbsp; <a href="interfa.htm#interface-name_interfa">
                             <var>interface-name</var> </a> 
               </td> 
                     
            </tr> 
                  
            <tr> 
                      
               <td colspan="2">&nbsp;&nbsp;[<a href="interfa.htm#EXTERNAL"> <code class="keyword">EXTERNAL</code></a>] 
               </td> 
                     
            </tr> 
                  
            <tr> 
                      
               <td colspan="2">&nbsp;&nbsp;[<code class="keyword">ID</code> <var>interface-GUID</var>] 
               </td> 
                     
            </tr> 
                  
            <tr> 
                      
               <td colspan="2">&nbsp;&nbsp;[<a href="interfa.htm#interface_property_def"><var>property-definition</var></a>]
                          
               </td> 
                     
            </tr> 
                  
            <tr> 
                      
               <td colspan="2">&nbsp;&nbsp;[<a href="interfa.htm#interface_method_def"><var>method-definition</var></a>]
                          
               </td> 
                     
            </tr> 
                  
            <tr> 
                      
               <td colspan="2"> <a href="interfa.htm#end_interface">
                      <code class="keyword">END-INTERFACE</code> </a> 
               </td> 
                     
            </tr> 
                 
         </tbody> 
             
      </table> 
          
         
      <p>This document covers the following topics:</p>
         
      <ul>
         <li>
            <p class="initem"><a href="interfa.htm#Function_interfa">Function</a></p>
         </li>
         <li>
            <p class="initem"><a href="interfa.htm#syntax_descr_interface">Syntax Description</a></p>
         </li>
      </ul> 
         
      <p>For an explanation of the symbols used in the syntax diagram, see
             <a href="synsym.htm#Syntax_Symbols">Syntax
            Symbols</a>.
      </p> 
         
      <p>Related Statements: <a href="create.htm#create">CREATE OBJECT</a>
             | <a href="definecl.htm#definecl">DEFINE CLASS</a> |
             <a href="interfa.htm#interfa">INTERFACE</a> | <a href="method.htm#method"> </a> <a href="method.htm#method">METHOD</a> |
             <a href="property.htm#property">PROPERTY</a> |
             <a href="sendmeth.htm#sendmeth">SEND METHOD</a> 
      </p> 
         
      <p>Belongs to Function Group:
             <a href="stmt.htm#Component_Based_Programming">Component Based
            Programming</a></p> 
        
      <hr> 
        
      <div><a name="Function_interfa"></a></div> 
         
      <h2> Function </h2> 
          
          
      <p>In component-based programming, an interface is a collection of methods
              and properties that belong together semantically and represent a certain
              feature of a class.
      </p> 
          
      <p>You can define one or several interfaces for a class. Defining several
              interfaces allows you to structure/group methods according to what they do,
              e.g., you put all methods that deal with persistency (load, store, update) in
              one interface and put other methods in other interfaces.
      </p> 
          
      <p>The <code>INTERFACE</code> statement is used to define an interface. It
              may only be used in a Natural class module and can be defined as follows:
      </p> 
          
      <ul> 
              
         <li> 
                  
            <p class="initem">within a <a href="definecl.htm#definecl"><code>DEFINE
                     CLASS</code></a> statement. This form is used when the interface is only
                      to be implemented in one class, or
            </p> 
                 
         </li> 
              
         <li> 
                  
            <p class="initem">in a copycode which is included by the
                      <a href="definecl.htm#INTERFACE_USING_Clause"><code>INTERFACE
                     USING</code></a> clause of the <code>DEFINE CLASS</code> statement. This
                      form is used when the interface is to be implemented in more than one
                      class.
            </p> 
                 
         </li> 
             
      </ul> 
          
      <p>The properties and methods that are associated with the interface are
              defined by the property and method definitions.
      </p> 
          
        
        
      <div class="noprint">
         <p><a href="interfa.htm#Top"><img src="../graphics/uparrow.png" alt="Top of page" height="17" width="17" border="0"></a></p>
      </div>
      <div><a name="syntax_descr_interface"></a></div> 
         
      <h2> Syntax Description </h2> 
          
           
           
      <table border="1" class="color" cellpadding="3" width="97%"> 
                
               
         <tbody align="left" valign="top"> 
                   
            <tr> 
                       
               <th nowrap> <a name="interface-name_interfa"></a> <var>interface-name</var>
                           
               </th> 
                       
               <td> 
                  
                  <p>This is the name to be assigned to the interface. The interface
                     name can be up to a maximum of 32 characters long and must conform to the
                     Natural naming conventions for user-defined variables; see
                               <a href="../using/use_rules.htm#use_rules-Variable_Names">Naming
                                  Conventions for User-Defined Variables</a> in the
                               <cite>Using Natural</cite>
                               documentation. It must be unique per class and different from the class
                               name.
                  </p> 
                           
                  <p>If the interface is planned to be used by clients written in
                               different programming languages, the interface name should be chosen in a way
                               that it does not conflict with the naming conventions that apply in these
                               languages.
                  </p> 
               </td> 
                      
            </tr> 
                   
            <tr> 
                       
               <th nowrap> <a name="EXTERNAL"></a>EXTERNAL
               </th> 
                       
               <td> The <code>EXTERNAL</code> clause is used to indicate that this
                  interface is implemented by the class, but which is originally defined in a
                  different class. The clause is only relevant if the class is to be registered
                  with DCOM. Interfaces with the <code>EXTERNAL</code> clause are ignored when
                           the class is registered with DCOM. It is assumed that the interface is
                           registered by the class that originally defines it. 
               </td> 
                      
            </tr> 
                   
            <tr> 
                       
               <th nowrap> <a name="ID_Clause_interfa"></a>ID <var>interface-GUID</var>
                           
               </th> 
                       
               <td> The <code>ID</code> clause is used to assign a globally unique
                  ID to the interface. The interface GUID is the name of a GUID defined in a data
                  area that is included by the <code>LOCAL</code> clause. The interface GUID is a
                           (named) alpha constant. A GUID must be assigned to an interface if the class is
                           to be registered with DCOM. 
               </td> 
                      
            </tr> 
                   
            <tr> 
                       
               <th nowrap> <a name="property-definition"></a>
                   <var>property-definition</var>  
               </th> 
                       
               <td>The property definition is used to define a property of the
                  interface. See <a href="interfa.htm#interface_property_def">Property
                              Definition</a> below.
               </td> 
                      
            </tr> 
                   
            <tr> 
                       
               <th nowrap> <a name="method-definition"></a>
                   <var>method-definition</var>  
               </th> 
                       
               <td>The method definition is used to define a method for the
                  interface. See <a href="interfa.htm#interface_method_def">Method
                              Definition</a> below.
               </td> 
                      
            </tr> 
                   
            <tr> 
                       
               <th nowrap> <a name="end_interface"></a>END-INTERFACE 
               </th> 
                       
               <td>The Natural reserved word <code>END-INTERFACE</code> must be
                           used to end the <code>INTERFACE</code> statement.
               </td> 
                      
            </tr> 
                  
         </tbody> 
              
      </table> 
           
          
         
      <div><a name="interface_property_def"></a></div> 
          
      <h3> Property Definition </h3> 
           
           
      <p>The property definition is used to define a property of the
               interface.
      </p> 
            
            
      <table border="0" class="syntax" cellpadding="3"> 
                 
                
         <tbody align="left" valign="top"> 
                    
            <tr> 
                        
               <td colspan="2"> <code class="keyword">PROPERTY</code> <a href="interfa.htm#property-name">
                               <var>property-name</var> </a> 
               </td> 
                       
            </tr> 
                    
            <tr> 
                        
               <td colspan="2" nowrap>&nbsp;&nbsp;[(<a href="interfa.htm#format-length_array-definition"><var>format-length/array-definition</var></a>)]
                            
               </td> 
                       
            </tr> 
                    
            <tr> 
                        
               <td colspan="2">&nbsp;&nbsp;[<a href="interfa.htm#ID_property"><code class="keyword">ID</code>
                          <var>dispatch-ID</var></a>] 
               </td> 
                       
            </tr> 
                    
            <tr> 
                        
               <td colspan="2">&nbsp;&nbsp;[<a href="interfa.htm#READONLY"><code class="keyword">READONLY</code></a>] 
               </td> 
                       
            </tr> 
                    
            <tr> 
                        
               <td colspan="2">
                  <a href="interfa.htm#IS_Clause_property_interfa">&nbsp;&nbsp;[<code class="keyword">IS</code> <var>operand</var>]</a>
                            
               </td> 
                       
            </tr> 
                    
            <tr> 
                        
               <td colspan="2" nowrap>
                  <a href="interfa.htm#end_property_interfa"> <code class="keyword">END-PROPERTY</code> </a> 
               </td> 
                       
            </tr> 
                   
         </tbody> 
               
      </table> 
            
           
      <p>Properties are attributes of an object that can be accessed by clients.
               An object that represents an employee might for example have a
               <code>Name</code> property and a <code>Department</code> property. Retrieving
               or changing the name or department of the employee by accessing her
               <code>Name</code> or <code>Department</code> property is much simpler for a
               client than calling one method that returns the value and another method that
               changes the value.
      </p> 
           
      <p>Each property needs a variable in the object data area of the class to
               store its value - this is referred to as the object data variable. The property
               definition is used to make this variable accessible to clients. The property
               definition defines the name and format of the property and connects it to the
               object data variable. In the simplest case, the property takes the name and
               format of the object data variable itself. It is also possible to override the
               name and format within certain limits.
      </p> 
            
            
      <table border="1" class="color" cellpadding="3" width="97%"> 
                 
                
         <tbody align="left" valign="top"> 
                    
            <tr> 
                        
               <th nowrap> <a name="property-name"></a>
                   <var>property-name</var> 
               </th> 
                        
               <td> 
                  
                  <p>This is the name to be assigned to the property. The property name
                     can contain up to a maximum of 32 characters and must conform to the Natural
                     naming conventions for user variables; see
                                <a href="../using/use_rules.htm#use_rules-Variable_Names">Naming
                                   Conventions for User-Defined Variables</a> in the
                                <cite>Using Natural</cite>
                                documentation.
                  </p> 
                            
                  <p>If the property is planned to be used by clients written in
                                different programming languages, the property name should be chosen in a way
                                that it does not conflict with the naming conventions that apply in these
                                languages.
                  </p> 
               </td> 
                       
            </tr> 
                    
            <tr> 
                        
               <th nowrap>
                  <a name="format-length_array-definition"></a>
                            <var>format-length/array-definition</var>  
               </th> 
                        
               <td> 
                  
                  <p>This defines the format of the property as it will be seen by
                         clients.
                  </p> 
                            
                  <p>If <var>format-length/array-definition</var> is
                                omitted, the format-length and array-definition will be taken from the object
                                data variable assigned in the <code>IS</code> clause.
                  </p> 
                            
                  <p>If <var>format-length/array-definition</var> is
                                specified, it must be data transfer-compatible both to and from the format of
                                the object data variable specified in <var>operand</var> in the
                                <a href="interfa.htm#IS_Clause_property_interfa"><code>IS</code></a>
                                clause. In the case of a <a href="interfa.htm#READONLY"><code>READONLY</code></a> property, the data
                                transfer-compatibility needs to hold only in one direction: with the object
                                data variable as source operand and the property as destination operand. If an
                                array-definition is specified, it must be equal in dimensions, occurrences per
                                dimension, lower bounds and upper bounds to the array definition of the
                                corresponding object data variable. This is expressed by specifying an asterisk
                                for each dimension.
                  </p> 
               </td> 
                       
            </tr> 
                    
            <tr> 
                        
               <th nowrap> <a name="ID_property"></a>ID <var>dispatch-ID</var> 
               </th> 
                        
               <td> 
                  
                  <p>The <code>ID</code> clause is used to assign a specific numeric
                     identifier to a property. This identifier (the so-called dispatch ID) is only
                     relevant if the class is to be registered with DCOM.
                  </p> 
                            
                  <p>Normally, Natural automatically assigns a dispatch ID to a
                                property. It is only necessary to explicitly define a specific dispatch ID for
                                a property if the property belongs to an interface with the
                                <a href="interfa.htm#EXTERNAL"><code>EXTERNAL</code></a> clause. (This is
                                an interface that shall be implemented in this class, but which is originally
                                defined in a different class.) In this case the dispatch IDs to be used are
                                usually dictated by the original implementation of the interface.
                  </p> 
                            
                  <p>The dispatch ID is a positive, non-zero constant of format I4.</p>
                            
               </td> 
                       
            </tr> 
                    
            <tr> 
                        
               <th nowrap> <a name="READONLY"></a>READONLY 
               </th> 
                        
               <td> 
                  
                  <p>If this keyword is specified, the value of the property can only
                     be read and not set. The format of the object data variable specified in
                                <var>operand</var> in the
                                <a href="interfa.htm#IS_Clause_property_interfa"><code>IS</code></a>
                                clause must be data transfer-compatible to the format specified in
                                <a href="interfa.htm#format-length_array-definition"><var>format-length/array-definition</var></a>.
                                It does not have to be data transfer-compatible in the inverse direction.
                  </p> 
                            
                  <p>If the keyword <code>READONLY</code> is omitted, the property
                                value can be both read and set.
                  </p> 
               </td> 
                       
            </tr> 
                    
            <tr> 
                        
               <th nowrap>
                  <a name="IS_Clause_property_interfa"></a>IS
                            <var>operand</var> 
               </th> 
                        
               <td> 
                  
                  <p>The <var>operand</var> in the <code>IS</code>
                     clause assigns an object data variable as the place to store the property
                     value. The assigned object data variable may not be a group. The variable is
                     referenced in normal operand syntax. This means that if the object data
                     variable is an array, it must be referenced with
                                <a href="../pg/pg_defi_dv.htm#Index_Notation">index notation</a>.
                                Only the full index range notation and asterisk notation is allowed.
                  </p> 
                            
                  <p>The <code>IS</code> clause should not be used if the
                                <code>INTERFACE</code> statement will be included from a copycode member and
                                reused in several classes. If you want to reuse the <code>INTERFACE</code>
                                statement, you must assign the object data variable in a
                                <a href="property.htm#property"><code>PROPERTY</code></a> statement
                                outside the <code>INTERFACE</code> statement.
                  </p> 
                            
                  <p>If the <code>IS</code> clause is omitted, the property is
                                connected to the object data variable with the same name as the property. If a
                                variable with this name is not defined or if it is a group, a syntax error
                                results.
                  </p> 
               </td> 
                       
            </tr> 
                    
            <tr> 
                        
               <th nowrap> <a name="end_property_interfa"></a>END-PROPERTY 
               </th> 
                        
               <td>The Natural reserved word <code>END-PROPERTY</code> must be
                            used to end the interface <code>PROPERTY</code> definition.
               </td> 
                       
            </tr> 
                   
         </tbody> 
               
      </table> 
            
           
      <h4 class="floating-title">Examples</h4> 
           
      <p>Let the object data area contain the following data definitions:</p> 
           <pre class="verbatim">1 Salary(p7.2)
1 SalaryHistory(p7.2/1:10)</pre> 
           <p>Then the following property definitions are allowed:</p> 
           <pre class="verbatim">property Salary
  end-property
  property Pay is Salary
  end-property
  property Pay(P7.2) is Salary
  end-property
  property Pay(N7.2) is Salary
  end-property
  property SalaryHistory
  end-property
  property OldPay is SalaryHistory(*)
  end-property
  property OldPay is SalaryHistory(1:10)
  end-property
  property OldPay(P7.2/*) is SalaryHistory(1:10)
  end-property
  property OldPay(N7.2/*) is SalaryHistory(*)
  end-property</pre> 
           <p>The following property definitions are not allowed:</p> 
           <pre class="verbatim">/* Not data transfer-compatible. */
  property Pay(L) is Salary
  end-property
  /* Not data transfer-compatible. */
  property OldPay(L/*) is SalaryHistory(*)
  end-property
  /* Not data transfer-compatible. */
  property OldPay(L/1:10) is SalaryHistory(1:10)
  end-property
  /* Assigns an array to a scalar. */
  property OldPay(P7.2) is SalaryHistory(1:10)
  end-property
  /* Takes only a sub-array. */
  property OldPay(P7.2/3:5) is SalaryHistory(*)
  end-property
  /* Index specification omitted in ODA variable SalaryHistory. */
  property OldPay is SalaryHistory
  end-property
  /* Only asterisk notation allowed in property format specification. */
  property OldPay(P7.2/1:10) is SalaryHistory(*)
  end-property</pre> 
           
          
         <div><a name="interface_method_def"></a></div> 
          
      <h3> Method Definition </h3> 
           
           
      <p>The method definition is used to define a method for the interface.</p>
           
            
            
      <table border="0" class="syntax" cellpadding="3"> 
                 
                 
                 
                
         <tbody align="left" valign="top"> 
                    
            <tr> 
                        
               <td colspan="6"> <code class="keyword">METHOD</code> <a href="interfa.htm#method-name_interfa">
                             <var>method</var></a><a href="interfa.htm#method-name_interfa"><var>-name</var> </a>
                            
               </td> 
                       
            </tr> 
                    
            <tr> 
                        
               <td colspan="6">&nbsp;&nbsp;[<a href="interfa.htm#ID_method"><code class="keyword">ID</code>
                          <var>dispatch-ID</var></a>] 
               </td> 
                       
            </tr> 
                    
            <tr> 
                        
               <td colspan="6">&nbsp;&nbsp;[<a href="interfa.htm#IS_Clause_method_interfa"><code class="keyword">IS</code>
                          <var>subprogram-name</var></a>] 
               </td> 
                       
            </tr> 
                    
            <tr> 
                        
               <td rowspan="2"> 
                  
                  <p><img src="../graphics/sbo2.gif" alt="" width="5" height="40"></p> 
               </td> 
                        
               <td rowspan="2"><a href="interfa.htm#PARAMETER_Clause">
                     <code class="keyword">PARAMETER</code> </a> &nbsp; 
               </td> 
                        
               <td rowspan="2"> 
                  
                  <p><img src="../graphics/cbo2.gif" alt="" width="6" height="38"></p> 
               </td> 
                        
               <td><code class="keyword">USING</code>
                       <var>parameter-data-area</var> 
               </td> 
                        
               <td rowspan="2" nowrap> 
                  
                  <p><img src="../graphics/cbc2.gif" alt="" width="6" height="38"></p> 
               </td> 
                        
               <td rowspan="2"><img src="../graphics/sbc2.gif" alt="" width="5" height="40">
                  <img src="../graphics/dot3.gif" alt="" width="12" height="4">
                            
               </td> 
                       
            </tr> 
                    
            <tr> 
                        
               <td><var>data-definition</var>
                            <img src="../graphics/dot3.gif" alt="" width="12" height="4"> &nbsp;
                            
               </td> 
                       
            </tr> 
                    
            <tr> 
                        
               <td colspan="6" nowrap>
                  <a href="interfa.htm#end_method_interfa"> <code class="keyword">END-METHOD</code>
                               </a> 
               </td> 
                       
            </tr> 
                   
         </tbody> 
               
      </table> 
            
           
      <p>To make the interface reusable in different classes, include the
               interface definition from a copycode and define the subprogram after the
               interface definition with a <code>METHOD</code> statement. Then you can
               implement the method differently in different classes.
      </p> 
            
            
      <table border="1" class="color" cellpadding="3" width="97%"> 
                 
                
         <tbody align="left" valign="top"> 
                    
            <tr> 
                        
               <th nowrap> <a name="method-name_interfa"></a>
                   <var>method-name</var> 
               </th> 
                        
               <td> 
                  
                  <p>This is the name to be assigned to the method. The method name can
                     contain a maximum of up to 32 characters and must conform to the Natural naming
                     conventions; see
                                <a href="../using/use_rules.htm#use_rules-Variable_Names">Naming
                                   Conventions for User-Defined Variables</a> in the
                                <cite>Using Natural</cite>
                                documentation. It must be unique per interface.
                  </p> 
                            
                  <p>If the method is planned to be used by clients written in
                                different programming languages, the method name should be chosen in a way that
                                it does not conflict with the naming conventions that apply in these
                                languages.
                  </p> 
               </td> 
                       
            </tr> 
                    
            <tr> 
                        
               <th nowrap> <a name="ID_method"></a>ID
                   <var>dispatch-ID</var> 
               </th> 
                        
               <td> 
                  
                  <p>The <code>ID</code> clause is used to assign a specific numeric
                     identifier to a method. This identifier (the so-called dispatch ID) is only
                     relevant if the class is to be registered with DCOM.
                  </p> 
                            
                  <p>Normally, Natural automatically assigns a dispatch ID to a method.
                                It is only necessary to explicitly define a specific dispatch ID for a method
                                if the method belongs to an interface with the <a href="interfa.htm#EXTERNAL"><code>EXTERNAL</code></a> clause. (This is an
                                interface that shall be implemented in this class, but which is originally
                                defined in a different class.) In this case, the dispatch IDs to be used are
                                usually dictated by the original implementation of the interface.
                  </p> 
                            
                  <p>The dispatch ID is a positive, non-zero constant of format I4.</p>
                            
               </td> 
                       
            </tr> 
                    
            <tr> 
                        
               <th nowrap>
                  <a name="IS_Clause_method_interfa"></a>IS
                            <var>subprogram-name</var> 
               </th> 
                        
               <td>This is the name of the subprogram that implements the method.
                  The name of the subprogram consists of up to 8 characters. The default is
                  method-name (if the <code>IS</code> clause is not specified).
               </td> 
                       
            </tr> 
                    
            <tr> 
                        
               <th nowrap> <a name="PARAMETER_Clause"></a>PARAMETER 
               </th> 
                        
               <td> 
                  
                  <p>This specifies the parameters of the method, and has the same
                     syntax as the <a href="defineda_pda.htm#defineda_pda"><code>PARAMETER</code></a> clause of the
                                <a href="defineda.htm#defineda"><code>DEFINE DATA</code></a>
                                statement.
                  </p> 
                            
                  <p>The parameters must match the parameters which are later used in
                                the implementation of the subprogram. This is ensured best by using a parameter
                                data area.
                  </p> 
                            
                  <p>Parameters that are marked <a href="defineda_pda.htm#BY_VALUE"><code>BY
                                      VALUE</code></a> in the parameter data area are input parameters of the
                                method.
                  </p> 
                            
                  <p>Parameters which are not marked <code>BY VALUE</code> are passed
                                "by reference" and are input/output parameters. This is the
                                default.
                  </p> 
                            
                  <p>The first parameter that is marked
                                <a href="defineda_pda.htm#BY_VALUE_RESULT"><code>BY VALUE RESULT</code></a> is
                                returned as the return value for the method. If more than one parameter is
                                marked in this way, the others will be treated as input/output parameters.
                  </p> 
                             
               </td> 
                       
            </tr> 
                    
            <tr> 
                        
               <th nowrap> <a name="end_method_interfa"></a>END-METHOD 
               </th> 
                        
               <td>The Natural reserved word <code>END-METHOD</code> must be used
                            to end the <code>METHOD</code> definition for the interface.
               </td> 
                       
            </tr> 
                   
         </tbody> 
               
      </table> 
            
           
          
        
       
      <div class="noprint">
         <div class="nospy">
            <p><a href="interfa.htm#Top"><img src="../graphics/uparrow.png" alt="Top of page" height="17" width="17" border="0"></a></p>
            <table border="0" cellpadding="0" cellspacing="0" width="97%">
               <col width="15%">
               <col width="34%">
               <col width="48%">
               <tr>
                  <td class="footer"><img src="../graphics/blank.png" width="3" height="10">&nbsp;<a class="navig" target="_blank" href="http://www.softwareag.com">www.softwareag.com</a>&nbsp;
                  </td>
                  <td nowrap class="footer"><img src="../graphics/blank.png" width="3"><a class="navig" href="../general/legal.htm" target="_blank">Copyright &copy; Software AG 1992-2008. All rights reserved.&nbsp;</a></td>
                  <td class="bottomlinks" align="right" nowrap><img src="../graphics/blank.png" width="3"><a class="navig" target="_blank" href="../fts/search.htm" onclick="window.open('../fts/search.htm', 'fts', 'dependent,width=555,height=420,resizable'); return false">SEARCH</a>
                     &nbsp;&nbsp;<a class="navig" href="javascript:sized_window('../navig/navig.htm')" onclick="document.cookie='sagphdcc=../sm/interfa.htm;path=/'; window.open('../navig/navig.htm', 'nvgtr', 'dependent,width=450,height=270,resizable'); return false">CONTENTS</a>&nbsp;&nbsp;&nbsp;|
                     &nbsp;&nbsp;<a class="navig" target="_blank" href="http://documentation.softwareag.com/natural/nat635unx/pdf/sm/interfa.pdf">PDF PAGE</a>
                     &nbsp;&nbsp;<a class="navig" target="_blank" href="../general/print.htm">PDF BOOKS</a>&nbsp;&nbsp;&nbsp;|
                     &nbsp;&nbsp;<a class="navig" href="../overview.htm">HOME</a>
                     &nbsp;&nbsp;<a class="navig" href="sm-over.htm">UP</a>
                     &nbsp;&nbsp;<a class="navig" href="input2.htm">PREV</a>
                     &nbsp;&nbsp;<a class="navig" href="limit.htm">NEXT</a></td>
               </tr>
            </table>
         </div>
      </div>
   </body>
</html>