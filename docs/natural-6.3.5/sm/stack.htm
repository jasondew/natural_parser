
<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   
      <meta name="generator" content="Sagdoc XSL Stylesheets">
      <link rel="stylesheet" type="text/css" href="../general/style2.css"><script language="JavaScript" src="../general/selbox.js"></script><script type="text/javascript" language="javascript">
         <!--
window.name = 'contents';
//--></script><title>STACK</title>
   </head>
   <body bgcolor="#FFFFFF" background="../graphics/bar.png" style="margin-left: 20px;">
      <div><a name="stack" id="16867"></a></div>
      <div class="noprint">
         <div class="nospytext">
            <table border="0" cellpadding="0" cellspacing="0" width="97%">
               <col width="15%">
               <col width="34%">
               <col width="48%">
               <tr>
                  <td colspan="2" class="topline"><a name="Top"></a>&nbsp;<img src="../graphics/natux_logo.png"></td>
                  <td class="topline" align="right"><img src="../graphics/sag_logo.png">&nbsp;
                  </td>
               </tr>
               <tr>
                  <td class="header" nowrap><img src="../graphics/blank.png" width="3" height="10"></td>
                  <td class="header"><img src="../graphics/blank.png" width="3">Version&nbsp;6.3.5 for UNIX
                  </td>
                  <td class="toplinks" align="right" nowrap><img src="../graphics/blank.png" width="3"><a class="navig" target="_blank" href="../fts/search.htm" onclick="window.open('../fts/search.htm', 'fts', 'dependent,width=555,height=420,resizable'); return false">SEARCH</a>
                     &nbsp;&nbsp;<a class="navig" href="javascript:sized_window('../navig/navig.htm')" onclick="document.cookie='sagphdcc=../sm/stack.htm;path=/'; window.open('../navig/navig.htm', 'nvgtr', 'dependent,width=450,height=270,resizable'); return false">CONTENTS</a>&nbsp;&nbsp;&nbsp;|
                     &nbsp;&nbsp;<a class="navig" target="_blank" href="http://documentation.softwareag.com/natural/nat635unx/pdf/sm/stack.pdf">PDF PAGE</a>
                     &nbsp;&nbsp;<a class="navig" target="_blank" href="../general/print.htm">PDF BOOKS</a>&nbsp;&nbsp;&nbsp;|
                     &nbsp;&nbsp;<a class="navig" href="../overview.htm">HOME</a>
                     &nbsp;&nbsp;<a class="navig" href="sm-over.htm">UP</a>
                     &nbsp;&nbsp;<a class="navig" href="sort.htm">PREV</a>
                     &nbsp;&nbsp;<a class="navig" href="stop.htm">NEXT</a></td>
               </tr>
            </table>
         </div>
      </div>
      <div class="nospytext" style="margin-top:0.25in;">
         <div><span class="module">&nbsp;&#8212;&nbsp;&nbsp;Statements&nbsp;&nbsp;&#8212;</span></div>
      </div> 
        
      <div class="nospytext">
         <h1> STACK 
               <a name="x163"></a></h1>
      </div> 
         
          
          
      <table border="0" class="syntax" cellpadding="3"> 
               
               
              
         <tbody align="left" valign="top"> 
                  
            <tr> 
                      
               <td rowspan="2"> <a href="stack.htm#Function_stack">
                      <code class="keyword">STACK</code> </a> [<a href="stack.htm#Top_stack"><code class="keyword">TOP</code></a>] 
               </td> 
                      
               <td rowspan="2"> 
                  
                  <p><img src="../graphics/cbo2.gif" alt="" width="6" height="38"></p> 
               </td> 
                      
               <td align="left" nowrap> <a href="stack.htm#operand2_stack">
                      <code class="keyword">COMMAND</code></a><a href="stack.htm#operand2_stack"> <var>operand1</var>
                             [<var>operand2</var> </a> [(<a href="stack.htm#parameter_stack"><var>parameter</var></a>)]]
                          <img src="../graphics/dot3.gif" alt="" width="12" height="4">
                          
               </td> 
                      
               <td rowspan="2"> 
                  
                  <p><img src="../graphics/cbc2.gif" alt="" width="6" height="38"></p> 
               </td> 
                     
            </tr> 
                  
            <tr> 
                      
               <td align="left" nowrap> [<a href="stack.htm#DATA_stack"><code class="keyword">DATA</code></a>] [<a href="stack.htm#FORMATTED"><code class="keyword">FORMATTED</code></a>]
                          {<a href="stack.htm#operand1_stack"><var>operand2</var>
                             </a> [(<a href="stack.htm#parameter_stack"><var>parameter</var></a>)]}
                          <img src="../graphics/dot3.gif" alt="" width="12" height="4">
                          
               </td> 
                     
            </tr> 
                 
         </tbody> 
             
      </table> 
          
         
      <p>This document covers the following topics:</p>
         
      <ul>
         <li>
            <p class="initem"><a href="stack.htm#Function_stack">Function</a></p>
         </li>
         <li>
            <p class="initem"><a href="stack.htm#syntax_descr_stack">Syntax Description</a></p>
         </li>
         <li>
            <p class="initem"><a href="stack.htm#Example_stack">Example</a></p>
         </li>
      </ul> 
         
      <p>For an explanation of the symbols used in the syntax diagram, see
             <a href="synsym.htm#Syntax_Symbols">Syntax
            Symbols</a>.
      </p> 
         
      <p>Related Statements: <a href="input.htm#input">INPUT</a> |
             <a href="release.htm#release">RELEASE</a></p> 
        
      <hr> 
        
      <div><a name="Function_stack"></a></div> 
         
      <h2> Function </h2> 
          
          
      <p>The <code>STACK</code> statement is used to place any of the following
              into the Natural stack:
      </p> 
          
      <ul> 
              
         <li> 
                  
            <p class="initem">the name of a Natural program or Natural system command to be
                      executed;
            </p> 
                 
         </li> 
              
         <li> 
                  
            <p class="initem">data to be used during the execution of an <a href="input.htm#input"><code>INPUT</code></a> statement.
            </p> 
                 
         </li> 
             
      </ul> 
          
      <p>For further information on the stack, see
              <a href="../pg/pg_furth-over.htm">Further Programming
            Aspects</a>, <a href="../pg/pg_furth_stack.htm">Stack</a> (in the
              <cite>Programming Guide</cite>).
      </p> 
          
        
        
      <div class="noprint">
         <p><a href="stack.htm#Top"><img src="../graphics/uparrow.png" alt="Top of page" height="17" width="17" border="0"></a></p>
      </div>
      <div><a name="syntax_descr_stack"></a></div> 
         
      <h2> Syntax Description </h2> 
          
          
      <p>Operand Definition Table:</p> 
           
           
      <table border="1" class="color" cellpadding="3" width="97%"> 
                
                
                
                
                
                
                
                
                
                
               
         <thead align="left" valign="top"> 
                   
            <tr> 
                       
               <th>Operand</th> 
                       
               <th colspan="5" align="center">
                  <a href="synsym.htm#statem_poss_struct">Possible Structure</a> 
               </th> 
                       
               <th colspan="13" align="center">
                  <a href="synsym.htm#statem_poss_form">Possible Formats</a> 
               </th> 
                       
               <th align="center"> <a href="synsym.htm#statem_ref_perm">Referencing
                     Permitted</a> 
               </th> 
                       
               <th align="center"> <a href="synsym.htm#statem_dyn_def">Dynamic
                     Definition</a> 
               </th> 
                      
            </tr> 
                  
         </thead> 
               
         <tbody align="left" valign="top"> 
                   
            <tr> 
                       
               <td> <var>operand1</var> 
               </td> 
                       
               <td>C</td> 
                       
               <td>S</td> 
                       
               <td>A</td> 
                       
               <td>G</td> 
                       
               <td>N</td> 
                       
               <td>A</td> 
                       
               <td>&nbsp;</td> 
                       
               <td>&nbsp;</td> 
                       
               <td>&nbsp;</td> 
                       
               <td>&nbsp;</td> 
                       
               <td>&nbsp;</td> 
                       
               <td>&nbsp;</td> 
                       
               <td>&nbsp;</td> 
                       
               <td>&nbsp;</td> 
                       
               <td>&nbsp;</td> 
                       
               <td>&nbsp;</td> 
                       
               <td>&nbsp;</td> 
                       
               <td>&nbsp;</td> 
                       
               <td align="center">yes</td> 
                       
               <td align="center">yes</td> 
                      
            </tr> 
                   
            <tr> 
                       
               <td> <var>operand2</var> 
               </td> 
                       
               <td>C</td> 
                       
               <td>S</td> 
                       
               <td>A</td> 
                       
               <td>G</td> 
                       
               <td>N</td> 
                       
               <td>A</td> 
                       
               <td>U</td> 
                       
               <td>N</td> 
                       
               <td>P</td> 
                       
               <td>I</td> 
                       
               <td>F</td> 
                       
               <td>B</td> 
                       
               <td>D</td> 
                       
               <td>T</td> 
                       
               <td>L</td> 
                       
               <td>&nbsp;</td> 
                       
               <td>G</td> 
                       
               <td>&nbsp;</td> 
                       
               <td align="center">yes</td> 
                       
               <td align="center">yes</td> 
                      
            </tr> 
                  
         </tbody> 
              
      </table> 
           
          
      <p>Syntax Element Description:</p> 
           
           
      <table border="1" class="color" cellpadding="3" width="97%"> 
                
               
         <tbody align="left" valign="top"> 
                   
            <tr> 
                       
               <th nowrap> <a name="Top_stack"></a>TOP
                   
               </th> 
                       
               <td> 
                  
                  <p>If you specify <code>TOP</code>, the data/program/command will be
                     placed at the top of the Natural stack. Otherwise, they are placed at the
                              bottom of the stack.
                  </p> 
                           
                  <p> Example: The following statement causes the content of the
                               variable <code>#FIELDA</code> to be placed as data on top of the stack:
                  </p> 
                           <pre class="verbatim">STACK TOP #FIELDA</pre> </td> 
                      
            </tr> 
                   
            <tr> 
                       
               <th nowrap> <a name="DATA_stack"></a>DATA 
               </th> 
                       
               <td> 
                  
                  <p><code>DATA</code> (which is also the default) causes data to be
                     placed in the stack which are to be used as input data for an
                               <a href="input.htm#input"><code>INPUT</code></a> statement.
                  </p> 
                           
                  <p>Delimiter characters or input assign characters contained within
                               the data values will be processed as delimiters. For details on how data from
                               the stack are processed by an <code>INPUT</code> statement, refer to
                               <a href="input2.htm#Processing_Data_from_the_Natural_Stack">Processing
                                  Data from the Natural Stack</a> (in the description of the
                               <code>INPUT</code> statement).
                  </p> 
                           
                  <p> Example: The following statements cause the contents of the
                               variables <code>#FIELD1</code> and <code>#FIELD2</code> to be placed in the
                               stack:
                  </p> 
                           <pre class="verbatim">MOVE 'ABC' TO #FIELD1
MOVE 'XYZ' TO #FIELD2
STACK #FIELD1 #FIELD2</pre> 
                           <p>These variables will be passed as data to the next
                               <a href="input.htm#input"><code>INPUT</code></a> statement in the
                               Natural program, using delimiter mode:
                  </p> 
                           <pre class="verbatim">INPUT #FIELD1  #FIELD2</pre> 
                           <p class="note"><strong>Note:</strong><br> If <a href="stack.htm#operand2_stack"><var>operand2</var></a> is a
                               time variable (Format T), only the time component of the variable content is
                               placed in the stack, but not the date component.
                  </p> 
               </td> 
                      
            </tr> 
                   
            <tr> 
                       
               <th nowrap> <a name="FORMATTED"></a>FORMATTED 
               </th> 
                       
               <td> 
                  
                  <p><code>FORMATTED</code> causes all data to be passed on a
                     field-by-field basis to the next <a href="input.htm#input"><code>INPUT</code></a> statement; no key assignments or
                               delimiter characters will be interpreted.
                  </p> 
                           
                  <p> Examples: </p> 
                           
                  <p>The following statements cause <code>ABC,DEF</code> to be placed in
                               <code>#FIELD1</code> and <code>XYZ</code> in <code>#FIELD2</code>:
                  </p> 
                           <pre class="verbatim">MOVE 'ABC,DEF' TO #FIELD1
MOVE 'XYZ'     TO #FIELD2
STACK TOP DATA FORMATTED #FIELD1 #FIELD2
...
INPUT #FIELD1 #FIELD2</pre> 
                           <p>Assuming the input delimiter character to be the comma
                               (profile/session parameter <code>ID=,</code>), the following
                               statements - without the keyword <code>FORMATTED</code> - cause
                               <code>ABC</code> to be placed in <code>#FIELD1</code> and <code>DEF</code> in
                               <code>#FIELD2</code>:
                  </p> 
                           <pre class="verbatim">MOVE 'ABC,DEF' TO #FIELD1
STACK TOP DATA #FIELD1
...
INPUT #FIELD1 #FIELD2</pre> 
                           <p class="note"><strong>Note:</strong><br>The <code>FORMATTED</code> option should be used if the data to
                               be passed contains delimiter, control or DBCS characters to avoid unintentional
                               interpretation of these characters.
                  </p> 
               </td> 
                      
            </tr> 
                   
            <tr> 
                       
               <th nowrap> <a name="operand1_stack"></a>COMMAND
                   <var>operand1</var> 
               </th> 
                       
               <td> 
                  
                  <p>To place a command (or program name) in the stack, you specify the
                        keyword <code>COMMAND</code> followed by the command
                               (<var>operand1</var>). Natural will execute the command instead
                               of displaying the <code>NEXT</code> prompt and prompting the user for
                               input.
                  </p> 
                           
                  <p> Example: The following statement causes the command
                               <a href="../syscom/run.htm"><code>RUN</code></a> to
                               be placed at the top of the stack. Natural will execute this command at the
                               point where the <code>NEXT</code> prompt would normally be issued.
                  </p> 
                           <pre class="verbatim">STACK TOP COMMAND 'RUN'</pre> </td> 
                      
            </tr> 
                   
            <tr> 
                       
               <th nowrap> <a name="operand2_stack"></a>COMMAND
                   <var>operand1 operand2</var> ... 
               </th> 
                       
               <td> 
                  
                  <p>Together with a command (<var>operand1</var>), you
                               may also place data (<var>operand2</var>) in the stack. These
                               data will then be processed by the next <a href="input.htm#input"><code>INPUT</code></a> statement after the command has
                               been executed.
                  </p> 
                           
                  <p>Data stacked with a command are always stacked unformatted.</p> 
                           
                  <p class="note"><strong>Note:</strong><br> If the data to be stacked include empty alphanumeric fields
                               (i.e., blanks), these blanks will be interpreted as delimiters between values
                               and thus not processed correctly by the corresponding <code>INPUT</code>
                               statement. Therefore, if you wish to stack empty alphanumeric fields as data
                               with a command, you have to use two <code>STACK</code> statements: one
                               <code>STACK DATA <var>operand2</var> ...</code> to stack the
                               data, and one <code>STACK COMMAND <var>operand1</var></code> to
                               stack the command.
                  </p> 
               </td> 
                      
            </tr> 
                   
            <tr> 
                       
               <th nowrap> <a name="parameter_stack"></a>
                   <var>parameter</var> 
               </th> 
                       
               <td> 
                  
                  <p>If <var>operand2</var> is a date variable, you can
                     specify the session parameter <a href="../parms/sp_df.htm"><code>DF</code></a> (Date Format) as
                               parameter for this variable.
                  </p> 
               </td> 
                      
            </tr> 
                  
         </tbody> 
              
      </table> 
           
          
        
        
      <div class="noprint">
         <p><a href="stack.htm#Top"><img src="../graphics/uparrow.png" alt="Top of page" height="17" width="17" border="0"></a></p>
      </div>
      <div><a name="Example_stack"></a></div> 
         
      <h2> Example </h2> 
          
          <pre class="verbatim">** Example 'STKEX1': STACK                                              
************************************************************************
DEFINE DATA LOCAL                                                       
1 #CODE (A1)                                                            
END-DEFINE                                                              
*                                                                       
INPUT //                                                                
  10X 'PLEASE SELECT COMMAND' //                                        
  10X 'LIST VIEW      (V)' /                                            
  10X 'LIST PROGRAM * (P)' /                                            
  10X 'TECH INFO      (T)' /                                            
  10X 'STOP           (.)' //                                           
  20X 'CODE:' #CODE                                                     
*                                                                       
*                                                                       
DECIDE ON FIRST #CODE                                                   
  VALUE 'V'                                                                
<strong>    STACK TOP DATA    'VIEW'                                            
    STACK TOP COMMAND 'LIST' </strong>                                  
  VALUE 'P'                               
<strong>    STACK TOP COMMAND 'LIST PROGRAM *'</strong>
  VALUE 'T'                             
<strong>    STACK TOP COMMAND 'LAST *'        
    STACK TOP COMMAND 'TECH'          
    STACK TOP COMMAND 'SYSPROD'</strong>   
  VALUE '.'                           
    STOP                              
  NONE                                
    REINPUT 'PLEASE ENTER VALID CODE' 
END-DECIDE                            
*                                     
*                                     
END                                  </pre> 
          <h4 class="floating-title">Output of Program STKEX1:</h4> <pre class="system-output">PLEASE SELECT COMMAND
                     
LIST VIEW      (V)   
LIST PROGRAM * (P)   
TECH INFO      (T)   
STOP           (.)   
                     
          CODE:<strong>P</strong></pre> 
          <h4 class="floating-title">After entering and confirming code:</h4> <pre class="system-output">16:46:28               ***** NATURAL LIST COMMAND *****              2005-01-19
User HTR                 - LIST Objects in a Library -         Library SYSEXSYN
                                                                               
Cmd  Name       Type         S/C  SM Version  User ID    Date        Time      
---  *________  P__________  *__  *  *______  *________  *__________ *________ 
__   ACREX1     Program      S/C  S  4.1.03   RKE        2004-11-11  16:32:37  
__   ACREX2     Program      S/C  S  4.1.03   RKE        2005-01-05  10:29:51  
__   ADDEX1     Program      S/C  S  4.1.03   RKE        2004-11-11  16:36:49  
__   AEDEX1R    Program      S/C  R  4.1.03   RKE        2004-11-11  16:40:34  
__   AEDEX1S    Program      S/C  S  4.1.03   RKE        2004-11-11  16:39:57  
__   AEPEX1R    Program      S/C  R  4.1.03   RKE        2004-11-11  16:41:57  
__   AEPEX1S    Program      S/C  S  4.1.03   RKE        2004-11-11  16:42:31  
__   AEPEX2     Program      S/C  S  4.1.03   RKE        2004-11-11  16:43:37  
__   ASDEX1R    Program      S/C  R  4.1.03   RKE        2004-11-11  17:00:21  
__   ASDEX1S    Program      S/C  S  4.1.03   RKE        2004-11-11  17:00:50  
__   ASGEX1R    Program      S/C  R  4.1.03   RKE        2004-11-11  17:02:01  
__   ASGEX1S    Program      S/C  S  4.1.03   RKE        2004-11-11  17:02:08  
__   ATBEX1R    Program      S/C  R  4.1.03   RKE        2004-11-11  17:03:18  
__   ATBEX1S    Program      S/C  S  4.1.03   RKE        2004-11-11  17:03:05  
                                                              14 Objects found 
Top of List.                                                                   
Command ===&gt;                                                                   
Enter-PF1---PF2---PF3---PF4---PF5---PF6---PF7---PF8---PF9---PF10--PF11--PF12---
      Help  Print Exit  Sort        --    -     +     ++          &gt;     Canc</pre> 
          
        
       <div class="noprint">
         <div class="nospy">
            <p><a href="stack.htm#Top"><img src="../graphics/uparrow.png" alt="Top of page" height="17" width="17" border="0"></a></p>
            <table border="0" cellpadding="0" cellspacing="0" width="97%">
               <col width="15%">
               <col width="34%">
               <col width="48%">
               <tr>
                  <td class="footer"><img src="../graphics/blank.png" width="3" height="10">&nbsp;<a class="navig" target="_blank" href="http://www.softwareag.com">www.softwareag.com</a>&nbsp;
                  </td>
                  <td nowrap class="footer"><img src="../graphics/blank.png" width="3"><a class="navig" href="../general/legal.htm" target="_blank">Copyright &copy; Software AG 1992-2008. All rights reserved.&nbsp;</a></td>
                  <td class="bottomlinks" align="right" nowrap><img src="../graphics/blank.png" width="3"><a class="navig" target="_blank" href="../fts/search.htm" onclick="window.open('../fts/search.htm', 'fts', 'dependent,width=555,height=420,resizable'); return false">SEARCH</a>
                     &nbsp;&nbsp;<a class="navig" href="javascript:sized_window('../navig/navig.htm')" onclick="document.cookie='sagphdcc=../sm/stack.htm;path=/'; window.open('../navig/navig.htm', 'nvgtr', 'dependent,width=450,height=270,resizable'); return false">CONTENTS</a>&nbsp;&nbsp;&nbsp;|
                     &nbsp;&nbsp;<a class="navig" target="_blank" href="http://documentation.softwareag.com/natural/nat635unx/pdf/sm/stack.pdf">PDF PAGE</a>
                     &nbsp;&nbsp;<a class="navig" target="_blank" href="../general/print.htm">PDF BOOKS</a>&nbsp;&nbsp;&nbsp;|
                     &nbsp;&nbsp;<a class="navig" href="../overview.htm">HOME</a>
                     &nbsp;&nbsp;<a class="navig" href="sm-over.htm">UP</a>
                     &nbsp;&nbsp;<a class="navig" href="sort.htm">PREV</a>
                     &nbsp;&nbsp;<a class="navig" href="stop.htm">NEXT</a></td>
               </tr>
            </table>
         </div>
      </div>
   </body>
</html>